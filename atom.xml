<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Blog</title>
  
  <subtitle>always-be-coding</subtitle>
  <link href="https://knowledge-things.github.io/atom.xml" rel="self"/>
  
  <link href="https://knowledge-things.github.io/"/>
  <updated>2023-01-03T02:12:41.212Z</updated>
  <id>https://knowledge-things.github.io/</id>
  
  <author>
    <name>Kevin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>s3fs挂载minio存储</title>
    <link href="https://knowledge-things.github.io/2023/01/03/s3fs-gua-zai-minio-cun-chu/"/>
    <id>https://knowledge-things.github.io/2023/01/03/s3fs-gua-zai-minio-cun-chu/</id>
    <published>2023-01-03T02:12:27.000Z</published>
    <updated>2023-01-03T02:12:41.212Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://opencv.github.io/cvat/docs/administration/advanced/installation_automatic_annotation/">https://opencv.github.io/cvat/docs/administration/advanced/installation_automatic_annotation/</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export CVAT_HOST&#x3D;10.9.98.213export no_proxy&#x3D;localhost,127.0.0.1,.example.com,172.19.0.0&#x2F;16,172.20.0.0&#x2F;16,172.17.0.0&#x2F;16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>```shell<br>docker-compose up -d<pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;shelldocker exec -it cvat_server bash -ic &#39;python3 ~&#x2F;manage.py createsuperuser&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>docker-compose -f docker-compose.yml -f components/serverless/docker-compose.serverless.yml up -d</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose -f docker-compose.yml -f docker-compose.override.yml -f components&#x2F;serverless&#x2F;docker-compose.serverless.yml -f components&#x2F;cuda&#x2F;docker-compose.cuda.yml -f components&#x2F;analytics&#x2F;docker-compose.analytics.yml -f components&#x2F;tf_annotation&#x2F;docker-compose.tf_annotation.yml  -f docker-compose.override.yml  build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker-compose -f docker-compose.yml -f docker-compose.override.yml -f components&#x2F;serverless&#x2F;docker-compose.serverless.yml -f components&#x2F;cuda&#x2F;docker-compose.cuda.yml -f components&#x2F;openvino&#x2F;docker-compose.openvino.yml -f components&#x2F;analytics&#x2F;docker-compose.analytics.yml -f components&#x2F;tf_annotation&#x2F;docker-compose.tf_annotation.yml  -f docker-compose.override.yml  up -d --build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it cvat_server bash -ic &#39;python3 ~&#x2F;manage.py createsuperuser&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="s3fs挂载minio存储"><a href="#s3fs挂载minio存储" class="headerlink" title="s3fs挂载minio存储"></a>s3fs挂载minio存储</h3><ol><li><p>安装 s3fs：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt install s3fs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在文件中输入您的凭据<code>$&#123;HOME&#125;/.passwd-s3fs</code>并设置仅所有者权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; $&#123;HOME&#125;&#x2F;.passwd-s3fschmod 600 $&#123;HOME&#125;&#x2F;.passwd-s3fs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>user_allow_other</code>在<code>/etc/fuse.conf</code>文件中取消注释：<code>sudo nano /etc/fuse.conf</code></p></li><li><p>运行 s3fs，替换<code>bucket_name</code>，<code>mount_point</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ s3fs test &#x2F;mnt&#x2F;share&#x2F; -o passwd_file&#x3D;$&#123;HOME&#125;&#x2F;.passwd-s3fs -o  url&#x3D;http:&#x2F;&#x2F;localhost:9000&#x2F; -o use_path_request_style <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="自动挂载"><a href="#自动挂载" class="headerlink" title="自动挂载"></a>自动挂载</h4><p>按照上面的前 3 个安装步骤进行操作。</p><h5 id="使用-fstab"><a href="#使用-fstab" class="headerlink" title="使用 fstab"></a>使用 fstab</h5><ol><li><p>使用以下内容创建一个名为 aws_s3_fuse 的 bash 脚本（例如在 /usr/bin 中，以 root 身份）（替换<code>user_name</code>将安装磁盘的代表，<code>backet_name</code>, <code>mount_point</code>, <code>/path/to/.passwd-s3fs</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bashsudo -u root s3fs test &#x2F;mnt&#x2F;share&#x2F; -o passwd_file&#x3D;&#x2F;root&#x2F;.passwd-s3fs -o allow_other -o  url&#x3D;http:&#x2F;&#x2F;localhost:9000&#x2F; -o use_path_request_styleexit 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol><li><p>给它执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo chmod +x &#x2F;usr&#x2F;bin&#x2F;aws_s3_fuse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编辑<code>/etc/fstab</code>添加这样一行，替换<code>mount_point</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;usr&#x2F;bin&#x2F;aws_s3_fuse  &#x2F;mnt&#x2F;share     fuse    allow_other,user,_netdev     0       0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="使用系统"><a href="#使用系统" class="headerlink" title="使用系统"></a>使用系统</h5><ol><li><p>创建单元文件<code>sudo nano /etc/systemd/system/s3fs.service</code> （替换<code>user_name</code>, <code>bucket_name</code>, <code>mount_point</code>, <code>/path/to/.passwd-s3fs</code>）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[Unit]Description&#x3D;FUSE filesystem over AWS S3 bucketAfter&#x3D;network.target[Service]Environment&#x3D;&quot;MOUNT_POINT&#x3D;&#x2F;mnt&#x2F;share&quot;User&#x3D;rootGroup&#x3D;rootExecStart&#x3D;s3fs cvat &#x2F;mnt&#x2F;share&#x2F; -o passwd_file&#x3D;&#x2F;root&#x2F;.passwd-s3fs -o allow_other -o  url&#x3D;http:&#x2F;&#x2F;localhost:9000&#x2F; -o use_path_request_style -o umask&#x3D;0000 -o endpoint&#x3D;fr-parExecStop&#x3D;fusermount -u &#x2F;mnt&#x2F;shareRestart&#x3D;alwaysType&#x3D;forking[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新系统配置，系统启动时启用unit autorun，挂载bucket：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo systemctl daemon-reloadsudo systemctl enable s3fs.servicesudo systemctl start s3fs.service# 卸载$ fusermount -u &#x2F;mnt&#x2F;share&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看</p><p>一个文件<code>/etc/mtab</code>包含当前挂载的文件系统的记录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &#x2F;etc&#x2F;mtab | grep &#39;s3fs&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://opencv.github.io/cvat/docs/administration/advanced/installation_automatic_annotation/&quot;&gt;https://opencv.github.io/cvat/doc</summary>
      
    
    
    
    
    <category term="minio" scheme="https://knowledge-things.github.io/tags/minio/"/>
    
  </entry>
  
  <entry>
    <title>TensorRT环境安装</title>
    <link href="https://knowledge-things.github.io/2022/12/28/tensorrt-huan-jing-an-zhuang/"/>
    <id>https://knowledge-things.github.io/2022/12/28/tensorrt-huan-jing-an-zhuang/</id>
    <published>2022-12-28T05:53:28.000Z</published>
    <updated>2023-01-03T02:11:38.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ONNX"><a href="#ONNX" class="headerlink" title="ONNX"></a>ONNX</h1><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><pre class="line-numbers language-none"><code class="language-none">!pip install -U numpy&#x3D;&#x3D;1.23.1!pip install -U onnx&#x3D;&#x3D;1.12.0!pip install -U onnxruntime&#x3D;&#x3D;1.12.1!pip install -U protobuf&#x3D;&#x3D;3.16.0!pip install -U typing-extensions&#x3D;&#x3D;4.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ubuntu users: the quickest way to install protobuf is to run</p><pre class="line-numbers language-none"><code class="language-none">apt-get install python3-pip python3-dev libprotobuf-dev protobuf-compiler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then you can build ONNX as:</p><pre class="line-numbers language-none"><code class="language-none">export CMAKE_ARGS&#x3D;&quot;-DONNX_USE_PROTOBUF_SHARED_LIBS&#x3D;ON&quot;git clone --recursive https:&#x2F;&#x2F;github.com&#x2F;onnx&#x2F;onnx.gitcd onnx# prefer lite protoset CMAKE_ARGS&#x3D;-DONNX_USE_LITE_PROTO&#x3D;ONpip install -e .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Verify-Installation"><a href="#Verify-Installation" class="headerlink" title="Verify Installation"></a>Verify Installation</h2><p>After installation, run</p><pre class="line-numbers language-none"><code class="language-none">python -c &quot;import onnx&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><p>ONNX uses <a href="https://docs.pytest.org/">pytest</a> as test driver. In order to run tests, you will first need to install pytest:</p><pre class="line-numbers language-none"><code class="language-none">pip install pytest nbval<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>After installing pytest, use the following command to run tests.</p><pre class="line-numbers language-none"><code class="language-none">pytest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Benchmark"><a href="#Benchmark" class="headerlink" title="Benchmark"></a>Benchmark</h1><p><a href="https://github.com/google/benchmark/tree/0d98dba29d66e93259db7daa53a9327df767a415">https://github.com/google/benchmark/tree/0d98dba29d66e93259db7daa53a9327df767a415</a></p><h2 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h2><pre class="line-numbers language-none"><code class="language-none"># Check out the library.$ git clone https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;benchmark.git# Go to the library root directory$ cd benchmark# Make a build directory to place the build output.$ cmake -E make_directory &quot;build&quot;# Generate build system files with cmake, and download any dependencies.$ cmake -E chdir &quot;build&quot; cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES&#x3D;on -DCMAKE_BUILD_TYPE&#x3D;Release ..&#x2F;# or, starting with CMake 3.13, use a simpler form:# cmake -DCMAKE_BUILD_TYPE&#x3D;Release -S . -B &quot;build&quot;# Build the library.$ cmake --build &quot;build&quot; --config Release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fatal: 无法访问 ‘<a href="https://github.com/openstreetmap/osmosis.git/’：GnuTLS">https://github.com/openstreetmap/osmosis.git/’：GnuTLS</a> recv error (-110): The TLS connection was non-properly terminated.</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>关掉ssl<br>输入以下代码：</p><pre class="line-numbers language-none"><code class="language-none">apt-get install gnutls-bingit config --global http.sslVerify falsegit config --global http.postBuffer 1048576000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="pybind11"><a href="#pybind11" class="headerlink" title="pybind11"></a>pybind11</h2><pre class="line-numbers language-none"><code class="language-none">$ cd &#x2F;workspace&#x2F;TensorRT&#x2F;parsers&#x2F;onnx&#x2F;third_party&#x2F;onnx&#x2F;third_party&#x2F;$ git clone https:&#x2F;&#x2F;github.com&#x2F;pybind&#x2F;pybind11.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="运行错误"><a href="#运行错误" class="headerlink" title="运行错误"></a>运行错误</h3><p>运行<code>yolov5</code>时<code>docker</code>容器报错：<code>ImportError: libGL.so.1: cannot open shared object file: No such file or directory</code>。</p><p>解决办法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">apt-get install ffmpeg libsm6 libxext6  -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ cd $TRT_OSSPATH $ mkdir -p build &amp;&amp; cd build $ cmake .. -DTRT_LIB_DIR&#x3D;$TRT_LIBPATH -DTRT_OUT_DIR&#x3D;&#96;pwd&#96;&#x2F;out $ make -j$(nproc)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ONNX&quot;&gt;&lt;a href=&quot;#ONNX&quot; class=&quot;headerlink&quot; title=&quot;ONNX&quot;&gt;&lt;/a&gt;ONNX&lt;/h1&gt;&lt;h2 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetson TX2上升级cmake方法</title>
    <link href="https://knowledge-things.github.io/2022/12/20/jetson-tx2-shang-sheng-ji-cmake-fang-fa/"/>
    <id>https://knowledge-things.github.io/2022/12/20/jetson-tx2-shang-sheng-ji-cmake-fang-fa/</id>
    <published>2022-12-20T01:53:21.000Z</published>
    <updated>2022-12-20T01:56:26.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从源码安装camke"><a href="#从源码安装camke" class="headerlink" title="从源码安装camke"></a>从源码安装camke</h1><h2 id="1-删除默认的cmake"><a href="#1-删除默认的cmake" class="headerlink" title="1. 删除默认的cmake"></a>1. 删除默认的cmake</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt remove cmakesudo apt purge --auto-remove cmake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-从官网下载所需版本，解压，创建build文件夹"><a href="#2-从官网下载所需版本，解压，创建build文件夹" class="headerlink" title="2. 从官网下载所需版本，解压，创建build文件夹"></a>2. 从官网下载所需版本，解压，创建build文件夹</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version&#x3D;3.13build&#x3D;3mkdir ~&#x2F;tempcd ~&#x2F;tempwget https:&#x2F;&#x2F;cmake.org&#x2F;files&#x2F;v$version&#x2F;cmake-$version.$build.tar.gztar -xzvf cmake-$version.$build.tar.gzcd cmake-$version.$build&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编译安装"><a href="#3-编译安装" class="headerlink" title="3. 编译安装"></a>3. 编译安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;bootstrapmake -j4sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-移动路径"><a href="#4-移动路径" class="headerlink" title="4. 移动路径"></a>4. 移动路径</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo cp .&#x2F;bin&#x2F;cmake &#x2F;usr&#x2F;bin&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-验证安装结果"><a href="#5-验证安装结果" class="headerlink" title="5.验证安装结果"></a>5.验证安装结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：<br><pre class="line-numbers language-none"><code class="language-none">cmake version 3.13.3CMake suite maintained and supported by Kitware (kitware.com&#x2F;cmake).<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从源码安装camke&quot;&gt;&lt;a href=&quot;#从源码安装camke&quot; class=&quot;headerlink&quot; title=&quot;从源码安装camke&quot;&gt;&lt;/a&gt;从源码安装camke&lt;/h1&gt;&lt;h2 id=&quot;1-删除默认的cmake&quot;&gt;&lt;a href=&quot;#1-删除默认的cm</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>阅读记录-2022/12</title>
    <link href="https://knowledge-things.github.io/2022/12/06/yue-du-ji-lu-2022-12/"/>
    <id>https://knowledge-things.github.io/2022/12/06/yue-du-ji-lu-2022-12/</id>
    <published>2022-12-06T02:01:36.000Z</published>
    <updated>2022-12-30T07:19:41.313Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.51cto.com/article/677110.html">digiKam使用</a><br><a href="https://snapcraft.io/install/digikam/ubuntu">snap digiKam</a><br><a href="https://linuxhint.com/setup-configure-autocomplete-zsh/">Ubuntu zsh autoComplete</a><br><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/paddlepaddle/tags">Paddle Nvidia Containers</a><br><a href="https://github.com/NVIDIA/DeepLearningExamples">NVIDIA DeepLearningExamples</a><br><a href="https://github.com/PINTO0309/openvino2tensorflow">openvino2tensorflow</a><br><a href="https://netron.app/">netron可视化网络</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.51cto.com/article/677110.html&quot;&gt;digiKam使用&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://snapcraft.io/install/digikam/ubuntu&quot;&gt;snap digiKam&lt;/</summary>
      
    
    
    
    
    <category term="阅读记录" scheme="https://knowledge-things.github.io/tags/%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter NoteBook 的快捷鍵</title>
    <link href="https://knowledge-things.github.io/2022/11/10/jupyter-notebook-de-kuai-jie-jian/"/>
    <id>https://knowledge-things.github.io/2022/11/10/jupyter-notebook-de-kuai-jie-jian/</id>
    <published>2022-11-10T07:14:31.000Z</published>
    <updated>2022-11-10T07:15:46.360Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快捷鍵狀態的快捷鍵（按-Esc-鍵開啟）"><a href="#快捷鍵狀態的快捷鍵（按-Esc-鍵開啟）" class="headerlink" title="快捷鍵狀態的快捷鍵（按 Esc 鍵開啟）:"></a>快捷鍵狀態的快捷鍵（按 Esc 鍵開啟）:</h3><div class="table-container"><table><thead><tr><th style="text-align:left">快捷鍵</th><th style="text-align:left">作用</th><th style="text-align:left">說明</th></tr></thead><tbody><tr><td style="text-align:left">Enter</td><td style="text-align:left">轉入編輯模式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-Enter</td><td style="text-align:left">運行本單元，選中下個單元</td><td style="text-align:left">新單元默認為命令模式</td></tr><tr><td style="text-align:left">Ctrl-Enter</td><td style="text-align:left">運行本單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Alt-Enter</td><td style="text-align:left">運行本單元，在其下插入新單元</td><td style="text-align:left">新單元默認為編輯模式</td></tr><tr><td style="text-align:left">Y</td><td style="text-align:left">單元轉入代碼狀態</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">M</td><td style="text-align:left">單元轉入 markdown 狀態</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">R</td><td style="text-align:left">單元轉入 raw 狀態</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">設定 1 級標題</td><td style="text-align:left">僅在 markdown 狀態下時建議使用標題相關快捷鍵，如果單元處於其他狀態，則會強制切換到 markdown 狀態</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">設定 2 級標題</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">設定 3 級標題</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">設定 4 級標題</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">設定 5 級標題</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">設定 6 級標題</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Up</td><td style="text-align:left">選中上方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">K</td><td style="text-align:left">選中上方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Down</td><td style="text-align:left">選中下方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">J</td><td style="text-align:left">選中下方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-K</td><td style="text-align:left">連續選擇上方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-J</td><td style="text-align:left">連續選擇下方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">A</td><td style="text-align:left">在上方插入新單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">B</td><td style="text-align:left">在下方插入新單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">X</td><td style="text-align:left">剪切選中的單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">複製選中的單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-V</td><td style="text-align:left">粘貼到上方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">V</td><td style="text-align:left">粘貼到下方單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Z</td><td style="text-align:left">恢復刪除的最後一個單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">D,D</td><td style="text-align:left">刪除選中的單元</td><td style="text-align:left">連續按兩個 D 鍵</td></tr><tr><td style="text-align:left">Shift-M</td><td style="text-align:left">合併選中的單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-S</td><td style="text-align:left">保存當前 NoteBook</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">S</td><td style="text-align:left">保存當前 NoteBook</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">L</td><td style="text-align:left">開關行號</td><td style="text-align:left">編輯框的行號是可以開啟和關閉的</td></tr><tr><td style="text-align:left">O</td><td style="text-align:left">轉換輸出</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-O</td><td style="text-align:left">轉換輸出滾動</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Esc</td><td style="text-align:left">關閉頁面</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Q</td><td style="text-align:left">關閉頁面</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">H</td><td style="text-align:left">顯示快捷鍵幫助</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">I,I</td><td style="text-align:left">中斷 NoteBook 內核</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">0,0</td><td style="text-align:left">重啟 NoteBook 內核</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift</td><td style="text-align:left">忽略</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-Space</td><td style="text-align:left">向上滾動</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Space</td><td style="text-align:left">向下滾動</td></tr></tbody></table></div><h3 id="編輯模式快捷鍵（-按-Enter-鍵啟動）"><a href="#編輯模式快捷鍵（-按-Enter-鍵啟動）" class="headerlink" title="編輯模式快捷鍵（ 按 Enter 鍵啟動）:"></a>編輯模式快捷鍵（ 按 Enter 鍵啟動）:</h3><div class="table-container"><table><thead><tr><th style="text-align:left">快捷鍵</th><th style="text-align:left">作用</th><th style="text-align:left">說明</th></tr></thead><tbody><tr><td style="text-align:left">Tab</td><td style="text-align:left">代碼補全或縮進</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-Tab</td><td style="text-align:left">提示</td><td style="text-align:left">輸出幫助信息，部分函數、類、方法等會顯示其定義原型，如果在其後加 <code>?</code> 再運行會顯示更加詳細的幫助</td></tr><tr><td style="text-align:left">Ctrl-]</td><td style="text-align:left">縮進</td><td style="text-align:left">向右縮進</td></tr><tr><td style="text-align:left">Ctrl-[</td><td style="text-align:left">解除縮進</td><td style="text-align:left">向左縮進</td></tr><tr><td style="text-align:left">Ctrl-A</td><td style="text-align:left">全選</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Z</td><td style="text-align:left">撤銷</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Shift-Z</td><td style="text-align:left">重做</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Y</td><td style="text-align:left">重做</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Home</td><td style="text-align:left">跳到單元開頭</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Up</td><td style="text-align:left">跳到單元開頭</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-End</td><td style="text-align:left">跳到單元末尾</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Down</td><td style="text-align:left">跳到單元末尾</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Left</td><td style="text-align:left">跳到左邊一個字首</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Right</td><td style="text-align:left">跳到右邊一個字首</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Backspace</td><td style="text-align:left">刪除前面一個字</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-Delete</td><td style="text-align:left">刪除後面一個字</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Esc</td><td style="text-align:left">切換到命令模式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-M</td><td style="text-align:left">切換到命令模式</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift-Enter</td><td style="text-align:left">運行本單元，選中下一單元</td><td style="text-align:left">新單元默認為命令模式</td></tr><tr><td style="text-align:left">Ctrl-Enter</td><td style="text-align:left">運行本單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Alt-Enter</td><td style="text-align:left">運行本單元，在下面插入一單元</td><td style="text-align:left">新單元默認為編輯模式</td></tr><tr><td style="text-align:left">Ctrl-Shift—</td><td style="text-align:left">分割單元</td><td style="text-align:left">按光標所在行進行分割</td></tr><tr><td style="text-align:left">Ctrl-Shift-Subtract</td><td style="text-align:left">分割單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-S</td><td style="text-align:left">保存當前 NoteBook</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Shift</td><td style="text-align:left">忽略</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Up</td><td style="text-align:left">光標上移或轉入上一單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Down</td><td style="text-align:left">光標下移或轉入下一單元</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">Ctrl-/</td><td style="text-align:left">註釋整行/撤銷註釋</td><td style="text-align:left">僅代碼狀態有效</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;快捷鍵狀態的快捷鍵（按-Esc-鍵開啟）&quot;&gt;&lt;a href=&quot;#快捷鍵狀態的快捷鍵（按-Esc-鍵開啟）&quot; class=&quot;headerlink&quot; title=&quot;快捷鍵狀態的快捷鍵（按 Esc 鍵開啟）:&quot;&gt;&lt;/a&gt;快捷鍵狀態的快捷鍵（按 Esc 鍵開啟）:&lt;/h3</summary>
      
    
    
    
    
    <category term="Jupyter 快捷键" scheme="https://knowledge-things.github.io/tags/Jupyter-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Paddle RCNN系列参数配置</title>
    <link href="https://knowledge-things.github.io/2022/11/03/paddle-rcnn-xi-lie-can-shu-pei-zhi/"/>
    <id>https://knowledge-things.github.io/2022/11/03/paddle-rcnn-xi-lie-can-shu-pei-zhi/</id>
    <published>2022-11-03T08:30:38.000Z</published>
    <updated>2022-11-03T09:33:36.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RCNN系列模型参数配置教程"><a href="#RCNN系列模型参数配置教程" class="headerlink" title="RCNN系列模型参数配置教程"></a>RCNN系列模型参数配置教程</h1><ul><li>标签： 模型参数配置</li></ul><pre class="line-numbers language-none"><code class="language-none">#基础配置  # 检测模型的名称architecture: MaskRCNN# 默认使用GPU运行，设为False时使用CPU运行use_gpu: true# 最大迭代次数，而一个iter会运行batch_size * device_num张图片# 一般batch_size为1时，1x迭代18万次，2x迭代36万次max_iters: 180000# 模型保存间隔，如果训练时eval设置为True，会在保存后进行验证snapshot_iter: 10000# 输出指定区间的平均结果，默认20，即输出20次的平均结果。也是默认打印log的间隔。log_iter: 20# 训练权重的保存路径save_dir: output# 模型的预训练权重，默认是从指定url下载pretrain_weights: https:&#x2F;&#x2F;paddle-imagenet-models-name.bj.bcebos.com&#x2F;ResNet50_cos_pretrained.tar# 验证模型的评测标准，可以选择COCO或者VOCmetric: COCO# 用于模型验证或测试的训练好的权重weights: output&#x2F;mask_rcnn_r50_fpn_1x&#x2F;model_final&#x2F;# 用于训练或验证的数据集的类别数目# **其中包含背景类，即81&#x3D;80 + 1（背景类）**num_classes: 81#####################################模型配置###################################### Mask RCNN元结构，包括了以下主要组件, 具体细节可以参考[论文]( https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1703.06870)MaskRCNN:  backbone: ResNet  fpn: FPN  rpn_head: FPNRPNHead  roi_extractor: FPNRoIAlign  bbox_assigner: BBoxAssigner  bbox_head: BBoxHead  mask_assigner: MaskAssigner  mask_head: MaskHead  rpn_only: false# 主干网络ResNet:  # 配置在哪些阶段加入可变性卷积，默认不添加  dcn_v2_stages: []  # ResNet深度，默认50  depth: 50  # 主干网络返回的主要阶段特征用于FPN作进一步的特征融合  # 默认从[2,3,4,5]返回特征  feature_maps: [2,3,4,5]  # 是否在训练中固定某些权重，默认从第2阶段开始固定，即resnet的stage 1  freeze_at: 2  # 是否停止norm layer的梯度回传，默认是  freeze_norm: true  # norm layer的权重衰退值  norm_decay: 0.0  # norm layer的类型, 可以选择bn&#x2F;sync_bn&#x2F;affine_channel, 默认为affine_channel  norm_type: affine_channel  # ResNet模型的类型, 分为&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;四种, 默认使用&#39;b&#39;类型  variant: b# FPN多特征融合FPN:  # FPN使用的最高层特征后是否添加额外conv，默认false  has_extra_convs: false  # FPN使用主干网络最高层特征，默认是resnet第5阶段后添加额外卷积操作变&lt;成了FPN的第6个，总共有5个阶段  max_level: 6  # FPN使用主干网络最低层特征，默认是resnet第2阶段的输出  min_level: 2  # FPN中使用Norm类型, bn&#x2F;sync_bn&#x2F;affine_channel&#x2F;null, 默认不用null  norm_type: null  # FPN输出特征的通道数量, 默认是256  num_chan: 256  # 特征图缩放比例, 默认是[0.03125, 0.0625, 0.125, 0.25]  spatial_scale: [0.03125, 0.0625, 0.125, 0.25]# 检测第一阶段RPNFPNRPNHead:  # FPN第一层特征生成anchor时，默认anchor尺寸32  anchor_start_size: 32  # RPNHead默认进行前背景二分类  num_classes: 1  # 根据特征图尺寸，在特征图的每个位置生成N个大小、长宽比各不同anchor  # N &#x3D; anchor_sizes * aspect_ratios  # 具体实现参考[API](fluid.layers.anchor_generator)  anchor_generator:    aspect_ratios: [0.5, 1.0, 2.0]    variance: [1.0, 1.0, 1.0, 1.0]  # 首先计算Anchor和GT BBox之间的IoU，为每个Anchor匹配上GT，  # 然后根据阈值过滤掉IoU低的Anchor，得到最终的Anchor及其GT进行loss计算  # 具体实现参考[API](fluid.layers.rpn_target_assign)  rpn_target_assign:    rpn_batch_size_per_im: 256    rpn_fg_fraction: 0.5    rpn_negative_overlap: 0.3    rpn_positive_overlap: 0.7    rpn_straddle_thresh: 0.0  # 首先取topk个分类分数高的anchor  # 然后通过NMS对这topk个anchor进行重叠度检测，对重叠高的两个anchor只保留得分高的  # 训练和测试阶段主要区别在最后NMS保留的Anchor数目  # 训练时输出2000个proposals，推理时输出1000个proposals  # 具体实现参考[API](fluid.layers.generate_proposals)  train_proposal:    min_size: 0.0    nms_thresh: 0.7    post_nms_top_n: 2000    pre_nms_top_n: 2000  test_proposal:    min_size: 0.0    nms_thresh: 0.7    post_nms_top_n: 1000    pre_nms_top_n: 1000# 对FPN每层执行RoIAlign后，然后合并输出结果，用于BBox Head计算FPNRoIAlign:  # 用于抽取特征特征的FPN的层数，默认为4  canconical_level: 4  # 用于抽取特征特征的FPN的特征图尺寸，默认为224  canonical_size: 224  # 用于抽取特征特征的最高层FPN，默认是2  max_level: 5  # 用于抽取特征特征的最底层FPN，默认是2  min_level: 2  #roi extractor的采样率，默认为2  sampling_ratio: 2  # 输出bbox的特征图尺寸，默认为7  box_resolution: 7  # 输出mask的特征图尺寸，默认为14  mask_resolution: 14# 输出实例掩码的HeadMaskHead:  # 卷积的数量，FPN是4，其他为0，默认为0  num_convs: 4  # mask head输出的特征图尺寸，默认14  resolution: 28  # 空洞率，默认为1  dilation: 1  # 第一个卷积后输出的特征图通道数, 默认为256  num_chan_reduced: 256  # 输出的mask的类别，默认为81  num_classes: 81# 求rpn生成的roi跟gt bbox之间的iou，然后根据阈值进行过滤，保留一定数量的roi# 再根据gt bbox的标签，对roi进行标签赋值，即得到每个roi的类别# 具体实现参考[API](fluid.layers.generate_proposal_labels)BBoxAssigner:  batch_size_per_im: 512  bbox_reg_weights: [0.1, 0.1, 0.2, 0.2]  bg_thresh_lo: 0.0  bg_thresh_hi: 0.5  fg_fraction: 0.25  fg_thresh: 0.5# 根据roi的label，选择前景，为其赋值mask label# 具体实现参考[API](fluid.layers.generate_mask_labels)MaskAssigner:  resolution: 28  num_classes: 81# 输出检测框的HeadBBoxHead:  # 在roi extractor和bbox head之间，插入两层FC，对特征做进一步学习  head: TwoFCHead  # 通过NMS进行bbox过滤  # 具体实现参考[API](fluid.layers.multiclass_nms)  nms:    keep_top_k: 100    nms_threshold: 0.5    score_threshold: 0.05# 输出检测框之前，对特征进一步学习TwoFCHead:  # FC输出的特征图通道数，默认是1024  num_chan: 1024#####################################训练配置###################################### 学习率配置LearningRate:  # 初始学习率, 一般情况下8卡gpu，batch size为2时设置为0.02  # 可以根据具体情况，按比例调整  # 比如说4卡V100，bs&#x3D;2时，设置为0.01  base_lr: 0.01  # 学习率规划器  # 具体实现参考[API](fluid.layers.piecewise_decay)  schedulers:    # 学习率衰减策略    # 对于coco数据集，1个epoch大概需要7000个iter    # if step &lt; 120000:    #    learning_rate &#x3D; 0.1    # elif 120000 &lt;&#x3D; step &lt; 160000:    #    learning_rate &#x3D; 0.1 * 0.1    # else:    #    learning_rate &#x3D; 0.1 * (0.1)**2    - !PiecewiseDecay      gamma: 0.1      milestones: [120000, 160000]    # 在训练开始时，调低学习率为base_lr * start_factor，然后逐步增长到base_lr，这个过程叫学习率热身，按照以下公式更新学习率    # linear_step &#x3D; end_lr - start_lr    # lr &#x3D; start_lr + linear_step * (global_step &#x2F; warmup_steps)    # 具体实现参考[API](fluid.layers.linear_lr_warmup)    - !LinearWarmup      start_factor: 0.3333333333333333      steps: 500OptimizerBuilder:  # 默认使用SGD+Momentum进行训练  # 具体实现参考[API](fluid.optimizer)  optimizer:    momentum: 0.9    type: Momentum  # 默认使用L2权重衰减正则化  # 具体实现参考[API](fluid.regularizer)  regularizer:    factor: 0.0001    type: L2#####################################数据配置###################################### 模型训练集设置参考# 训练、验证、测试使用的数据配置主要区别在数据路径、模型输入、数据增强参数设置TrainReader:  # 训练过程中模型的相关输入  # 包括图片，图片长宽高等基本信息，图片id，标记的目标框、实例标签、实例分割掩码  inputs_def:    fields: [&#39;image&#39;, &#39;im_info&#39;, &#39;im_id&#39;, &#39;gt_bbox&#39;, &#39;gt_class&#39;, &#39;is_crowd&#39;, &#39;gt_mask&#39;]  # VOC数据集对应的输入，注意选择VOC时，也要对应修改metric: VOC- # fields: [&#39;image&#39;, &#39;im_info&#39;, &#39;im_id&#39;, &#39;gt_bbox&#39;, &#39;gt_class&#39;, &#39;is_difficult&#39;]  # 数据集目录配置  dataset:    # 指定数据集名称，可以选择VOCDataSet, COCODataSet    !COCODataSet    # 训练图片所在目录    image_dir: train2017    # 标记文件所在目录    anno_path: annotations&#x2F;instances_train2017.json    # 数据集根目录    dataset_dir: dataset&#x2F;coco  # 对一个batch中的单张图片做的数据增强  sample_transforms:  # 读取Image图像为numpy数组  # 可以选择将图片从BGR转到RGB，可以选择对一个batch中的图片做mixup增强  - !DecodeImage    to_rgb: true  # 对图片进行随机翻转  # 可以选择同步翻转mask，可以选择归一化bbox的坐标  - !RandomFlipImage    prob: 0.5  # 归一化图片，默认均值[0.485, 0.456, 0.406]，方差[1, 1, 1]  # 可以选择将归一化结果除以255，可以选择图片的数据格式  - !NormalizeImage    is_channel_first: false    is_scale: true    mean: [0.485,0.456,0.406]    std: [0.229, 0.224,0.225]  # 调整图片尺寸，默认采用cv2的线性插值  - !ResizeImage    target_size: 800    max_size: 1333    interp: 1    use_cv2: true  # 调整图片数据格式，默认使用CHW  - !Permute    to_bgr: false    channel_first: true  # 对一个batch中的图片统一做的数据增强  batch_transforms:  # 将一个batch中的图片，按照最大的尺寸，做补齐  - !PadBatch    pad_to_stride: 32    # 选择是否使用padding之后的image信息，默认为false    use_padded_im_info: false  # 1个GPU的batch size，默认为1  batch_size: 1  # 选择是否打乱所有样本的顺序  shuffle: true  # 使用多进程&#x2F;线程的数目，默认为2  worker_num: 2  # 选择是否使用多进程，默认为false  use_process: false  # 如果最后一个batch的图片数量为奇数，选择是否丢掉这个batch，不进行训练，默认是不丢掉的  drop_last: false  # 使用数据集中的样本数目，默认是-1，表示使用全部  samples: -1  # 模型验证集设置参考  EvalReader:  # 验证过程中模型的相关输入  # 包括图片，图片长宽高等基本信息，图片id，图片shape  inputs_def:    fields: [&#39;image&#39;, &#39;im_info&#39;, &#39;im_id&#39;, &#39;im_shape&#39;]  dataset:    !COCODataSet    image_dir: val2017    anno_path: annotations&#x2F;instances_val2017.json    dataset_dir: dataset&#x2F;coco  sample_transforms:  - !DecodeImage    to_rgb: true  - !NormalizeImage    is_channel_first: false    is_scale: true    mean: [0.485,0.456,0.406]    std: [0.229, 0.224,0.225]  - !ResizeImage    interp: 1    max_size: 1333    target_size: 800    use_cv2: true  - !Permute    channel_first: true    to_bgr: false    batch_size: 1    shuffle: false    drop_last: false    drop_empty: false    worker_num: 2# 测试验证集设置参考TestReader:  # 测试过程中模型的相关输入  # 包括图片，图片长宽高等基本信息，图片id，图片shape  inputs_def:    fields: [&#39;image&#39;, &#39;im_info&#39;, &#39;im_id&#39;, &#39;im_shape&#39;]  dataset:    # 测试图片所在目录    !ImageFolder    anno_path: annotations&#x2F;instances_val2017.json  sample_transforms:  - !DecodeImage    to_rgb: true    with_mixup: false  - !NormalizeImage    is_channel_first: false    is_scale: true    mean: [0.485,0.456,0.406]    std: [0.229, 0.224,0.225]  - !ResizeImage    interp: 1    max_size: 1333    target_size: 800    use_cv2: true  - !Permute    channel_first: true    to_bgr: false  batch_size: 1  shuffle: false  drop_last: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RCNN系列模型参数配置教程&quot;&gt;&lt;a href=&quot;#RCNN系列模型参数配置教程&quot; class=&quot;headerlink&quot; title=&quot;RCNN系列模型参数配置教程&quot;&gt;&lt;/a&gt;RCNN系列模型参数配置教程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;标签： 模型参数配置&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Paddle" scheme="https://knowledge-things.github.io/categories/Paddle/"/>
    
    
    <category term="RCNN  参数配置" scheme="https://knowledge-things.github.io/tags/RCNN-%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://knowledge-things.github.io/2022/11/03/linux-chang-yong-ming-ling/"/>
    <id>https://knowledge-things.github.io/2022/11/03/linux-chang-yong-ming-ling/</id>
    <published>2022-11-03T08:22:29.000Z</published>
    <updated>2022-11-24T13:03:47.668Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看分辨率等信息$ identify xxx.jpg# 关闭模型评估内存异常未正确推出的进程$ ps aux | grep &#39;tools&#x2F;train.py&#39;  | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9$ ps aux | grep &#39;tools&#x2F;eval.py&#39;  | awk &#39;&#123;print $2&#125;&#39; | xargs kill -9# 按照文件大小排序显示，按字节排序，按兆（M）加参数 ‘h’$ du -sh .&#x2F;* | sort -rn   从大到小$ du -sh .&#x2F;* | sort -n    从小到大# 选择部分列出$ du -s &#x2F;usr&#x2F;* | sort -rn | head     前面的10个$ du -s &#x2F;usr&#x2F;* | sort -rn | tail     后面的10个# 查找文件内容$ find .&#x2F; -type f -name &quot;*.xml&quot; | xargs grep &quot;0000280.png&quot;# 远程Copy文件到本地$ scp rtzh@10.11.109.247:&#x2F;data&#x2F;aiimages&#x2F;dataset&#x2F;anjian&#x2F;gkpw.zip .&#x2F;#统计文件数量$ ls -l | grep &quot;^-&quot; | wc -l# 列出 tar.xz 文件内容tar -tf archive.tar.xz#压缩tar –zcvf jpg.tar.gz a&#x2F;# 将文件或者文件件打包为zip压缩包，book.zip大小为38.8Mzip -r book.zip .&#x2F;input.pdf# 将book.zip分割，每个压缩包不超过20M，生成两个压缩包subbook.zip（17.8M）和subbook.z01（21M）zip -s 20m book.zip --out subbook.zip#解压到指定目录tar -zxvf &#x2F;bbs.tar.zip -C &#x2F;zzz&#x2F;bbs    # 解压多个unzip \*.zip #实时显示GPU资源使用情况watch -n 2 -d nvidia-smi #启动 visualdl$ visualdl --logdir .&#x2F;vdl_dir&#x2F;scalar --host 0.0.0.0 --port 8088# 查看Docker环境变量信息$ systemctl show docker --property Environment# Docker proxy config$ &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d$ nano proxy.conf[Service]Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:2340&#x2F;&quot;Environment&#x3D;&quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:2340&#x2F;&quot;Environment&#x3D;&quot;NO_PROXY&#x3D;localhost,127.0.0.1,.example.com&quot;$ systemctl daemon-reload$ systemctl restart docker$ systemctl status docker#清除历史编译文件夹$ find . -name pom.xml -exec mvn clean -f &#39;&#123;&#125;&#39; \;$ find . -name &#39;target&#39; -a -type d -exec rm -rfv &#39;&#123;&#125;&#39; \;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;# 查看分辨率等信息
$ identify xxx.jpg

# 关闭模型评估内存异常未正确推出的进程</summary>
      
    
    
    
    <category term="Linux" scheme="https://knowledge-things.github.io/categories/Linux/"/>
    
    
    <category term="常用命令" scheme="https://knowledge-things.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>mAP计算</title>
    <link href="https://knowledge-things.github.io/2022/11/03/map-ji-suan/"/>
    <id>https://knowledge-things.github.io/2022/11/03/map-ji-suan/</id>
    <published>2022-11-03T08:03:32.000Z</published>
    <updated>2022-11-03T08:15:50.897Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载内容 如有侵权 或 不希望被转载 可以留言或私发告诉我，我会及时处理，尊重你的权利。<br>原文链接[<a href="https://aistudio.baidu.com/aistudio/projectdetail/2213799">https://aistudio.baidu.com/aistudio/projectdetail/2213799</a>] </p></blockquote><p>在机器学习领域中，用于评价一个模型的性能有多种指标，其中几项就是FP、FN、TP、TN、精确率(Precision)、召回率(Recall)、准确率(Accuracy)。</p><p>mean Average Precision, 即各类别AP的平均值，是AP：PR 曲线下面积。</p><p>此前先了解一下IOU评判标准：</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/156a2736163b482d9405bbf1a7fc76c8d818d372669642c88f26d7f8f9ad6a1f" alt="img"></p><p>TP、FP、FN、TN</p><p>常见的评判方式，第一位的T,F代表正确或者错误。第二位的P和N代表判断的正确或者错误</p><ul><li>True Positive (TP): IoU&gt;IOUthreshold IoU&gt;<em>I<strong>O</strong>U</em>threshold  (IOU的阈值一般取0.5)的所有检测框数量（同一Ground Truth只计算一次），可以理解为真实框，或者标准答案</li><li>False Positive (FP): IoU&lt;IOUthreshold IoU&lt;<em>I<strong>O</strong>U</em>threshold  的所有检测框数量</li><li>False Negative (FN): 没有检测到的 GT 的数量</li><li>True Negative (TN): mAP中无用到</li></ul><p><img src="https://ai-studio-static-online.cdn.bcebos.com/c9ddb96d1bc94786903d6e3186a951fe7042c831c2ad4d329aaf95298c2eda79" alt="img"></p><p>查准率（Precision）: Precision =TPTP+FP=TP all detections =<em>T**P</em>+<em>F<strong>P</strong>T**P</em>= all detections <em>T**P</em></p><p>查全率（Recall）: Recall =TPTP+FN=TP all ground truths =<em>T**P</em>+<em>F<strong>N</strong>T**P</em>= all ground truths <em>T**P</em></p><p>二者绘制的曲线称为 P-R 曲线： 查准率：P 为纵轴y 查全率：R 为横轴x轴，如下图</p><p><img src="https://ai-studio-static-online.cdn.bcebos.com/2505d5e4ce9040879553d2a3252785e9d5cf697d278543999e77ef0b51d2847a" alt="img"></p><p>mAP值即为，PR曲线下的面积。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载内容 如有侵权 或 不希望被转载 可以留言或私发告诉我，我会及时处理，尊重你的权利。&lt;br&gt;原文链接[&lt;a href=&quot;https://aistudio.baidu.com/aistudio/projectdetail/2213799&quot;&gt;htt</summary>
      
    
    
    
    <category term="Deep Learning" scheme="https://knowledge-things.github.io/categories/Deep-Learning/"/>
    
    
    <category term="mAP" scheme="https://knowledge-things.github.io/tags/mAP/"/>
    
  </entry>
  
  <entry>
    <title>训练过程记录（一）</title>
    <link href="https://knowledge-things.github.io/2022/11/03/xun-lian-guo-cheng-ji-lu-yi/"/>
    <id>https://knowledge-things.github.io/2022/11/03/xun-lian-guo-cheng-ji-lu-yi/</id>
    <published>2022-11-03T07:59:26.000Z</published>
    <updated>2022-11-03T09:38:26.118Z</updated>
    
    <content type="html"><![CDATA[<p>根据基建赛方提供的数据集进行训练，</p><h3 id="一、首先对数据集进行转换，转化步骤如下"><a href="#一、首先对数据集进行转换，转化步骤如下" class="headerlink" title="一、首先对数据集进行转换，转化步骤如下"></a>一、首先对数据集进行转换，转化步骤如下</h3><h4 id="1、VOC数据集拆分-运行脚本，并设置训练集和验证集比例"><a href="#1、VOC数据集拆分-运行脚本，并设置训练集和验证集比例" class="headerlink" title="1、VOC数据集拆分  运行脚本，并设置训练集和验证集比例"></a>1、VOC数据集拆分  运行脚本，并设置训练集和验证集比例</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">python tools&#x2F;splitData_labelImg.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cd.bjrtzh.com/zentao/file-read-3156.png" alt="img"></p><h4 id="2、voc数据集转coco数据集，转化命令如下"><a href="#2、voc数据集转coco数据集，转化命令如下" class="headerlink" title="2、voc数据集转coco数据集，转化命令如下"></a>2、voc数据集转coco数据集，转化命令如下</h4><p><img src="https://cd.bjrtzh.com/zentao/file-read-3157.png" alt="img"></p><h4 id="3、coco-box转segmentation"><a href="#3、coco-box转segmentation" class="headerlink" title="3、coco box转segmentation"></a>3、coco box转segmentation</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">python tools&#x2F;Segmentations.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cd.bjrtzh.com/zentao/file-read-3158.png" alt="img"></p><h3 id="二、开始训练"><a href="#二、开始训练" class="headerlink" title="二、开始训练"></a>二、开始训练</h3><h4 id="1、设定学习率为"><a href="#1、设定学习率为" class="headerlink" title="1、设定学习率为"></a>1、设定学习率为</h4><p><code>base_lr: 0.00125</code></p><h4 id="2、训练epoch为92轮"><a href="#2、训练epoch为92轮" class="headerlink" title="2、训练epoch为92轮"></a>2、训练epoch为92轮</h4><p>经过观察当训练到60轮次左右时Loss值已经停止下降保持在0.19243如下图所示，下一步将调整学习率增加一倍，并且对数据集进行增强，</p><p>采用线下增强方式，采用 移位（translation）、视角（viewpoint）、大小（size）、照明（illumination）</p><p>（*Paddle也支持线上增强，即在输入模型之前做resize处理）</p><p><img src="https://cd.bjrtzh.com/zentao/file-read-3159.png" alt="img"><br><img src="https://cd.bjrtzh.com/zentao/file-read-3162.png" alt="img"><br><em>optimization分析当前发生local minima或saddle point的原因</em></p><p><img src="https://cd.bjrtzh.com/zentao/file-read-3160.png" alt="img"><img src="https://cd.bjrtzh.com/zentao/file-read-3161.png" alt="img"></p><p>当前训练集仅为800张，数据增强后继续观察。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据基建赛方提供的数据集进行训练，&lt;/p&gt;
&lt;h3 id=&quot;一、首先对数据集进行转换，转化步骤如下&quot;&gt;&lt;a href=&quot;#一、首先对数据集进行转换，转化步骤如下&quot; class=&quot;headerlink&quot; title=&quot;一、首先对数据集进行转换，转化步骤如下&quot;&gt;&lt;/a&gt;一、首先</summary>
      
    
    
    
    <category term="Deep Learning" scheme="https://knowledge-things.github.io/categories/Deep-Learning/"/>
    
    
    <category term="mask rcnn" scheme="https://knowledge-things.github.io/tags/mask-rcnn/"/>
    
  </entry>
  
  <entry>
    <title>Hyper parameter调优</title>
    <link href="https://knowledge-things.github.io/2022/11/02/hyper-parameter-diao-you/"/>
    <id>https://knowledge-things.github.io/2022/11/02/hyper-parameter-diao-you/</id>
    <published>2022-11-02T03:19:04.000Z</published>
    <updated>2022-11-02T03:22:52.297Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/5681667359188_.pic.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/5681667359188_.pic.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="Object detection" scheme="https://knowledge-things.github.io/tags/Object-detection/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04安装NCCL</title>
    <link href="https://knowledge-things.github.io/2022/11/01/ubuntu-18-04-an-zhuang-nccl/"/>
    <id>https://knowledge-things.github.io/2022/11/01/ubuntu-18-04-an-zhuang-nccl/</id>
    <published>2022-11-01T09:52:12.000Z</published>
    <updated>2022-11-01T09:58:08.385Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-18-04安装NCCL"><a href="#Ubuntu-18-04安装NCCL" class="headerlink" title="Ubuntu 18.04安装NCCL"></a>Ubuntu 18.04安装NCCL</h1><blockquote><p><a href="https://developer.nvidia.com/nccl/nccl-legacy-downloads">https://developer.nvidia.com/nccl/nccl-legacy-downloads</a></p></blockquote><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>官网下载地址：<a href="https://developer.nvidia.com/nccl/nccl-download">https://developer.nvidia.com/nccl/nccl-download</a><br>注意版本与你的cuda适配。</p><p>2.安装</p><p>获得.deb安装文件如：nccl-local-repo-ubuntu1804-2.8.4-cuda11.1_1.0-1_amd64.deb后</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo dpkg -i nccl-local-repo-ubuntu1804-2.8.4-cuda11.1_1.0-1_amd64.deb  # 安装# 如果提示缺少公共CUDA GPG秘钥sudo apt-key add &#x2F;var&#x2F;nccl-repo-2.8.3-ga-cuda10.2&#x2F;7fa2af80.pub# 必不可少更新sudo apt updatesudo apt install libnccl2 libnccl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu-18-04安装NCCL&quot;&gt;&lt;a href=&quot;#Ubuntu-18-04安装NCCL&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu 18.04安装NCCL&quot;&gt;&lt;/a&gt;Ubuntu 18.04安装NCCL&lt;/h1&gt;&lt;blockquo</summary>
      
    
    
    
    <category term="NVIDIA" scheme="https://knowledge-things.github.io/categories/NVIDIA/"/>
    
    
    <category term="nccl" scheme="https://knowledge-things.github.io/tags/nccl/"/>
    
  </entry>
  
  <entry>
    <title>SSH tunnel</title>
    <link href="https://knowledge-things.github.io/2022/11/01/ssh-tunnel/"/>
    <id>https://knowledge-things.github.io/2022/11/01/ssh-tunnel/</id>
    <published>2022-11-01T01:38:33.000Z</published>
    <updated>2022-11-01T02:56:32.826Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考链接 <a href="https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/">https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/</a><br><a href="https://www.escapelife.site/posts/e6647650.html">https://www.escapelife.site/posts/e6647650.html</a><br><a href="https://blog.csdn.net/scwMason/article/details/111152300">https://blog.csdn.net/scwMason/article/details/111152300</a></p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>公网服务器B</li><li>需要访问的目标内网服务器A</li></ol><h5 id="公网服务器配置"><a href="#公网服务器配置" class="headerlink" title="公网服务器配置"></a>公网服务器配置</h5><p>修改公网主机 B 的 SSH 配置文件/etc/ssh/sshd_config</p><p>GatewayPorts yes<br>1<br>这样可以把监听的端口绑定到任意 IP 0.0.0.0 上，否则只有本机 127.0.0.1 可以访问。</p><h5 id="重启-sshd-服务"><a href="#重启-sshd-服务" class="headerlink" title="重启 sshd 服务"></a>重启 sshd 服务</h5><p><code>sudo service sshd restart</code><br>内网服务器配置</p><p>在内网主机 A 上，执行以下命令安装 AutoSSH</p><p>How to install AutoSSH on various systems via their package manager.</p><div class="table-container"><table><thead><tr><th>OS</th><th>Install method</th></tr></thead><tbody><tr><td>Debian / Ubuntu</td><td><code>$ sudo apt-get install autossh</code></td></tr><tr><td>CentOS / Fedora / RHEL</td><td><code>$ sudo yum install autossh</code></td></tr><tr><td>ArchLinux</td><td><code>$ sudo pacman -S autossh</code></td></tr><tr><td>FreeBSD</td><td><code># pkg install autossh</code> or <code># cd /usr/ports/security/autossh/ &amp;&amp; make install clean</code></td></tr><tr><td>OSX</td><td><code>$ brew install autossh</code></td></tr></tbody></table></div><p>Alternatively you can also compile and install AutoSSH from source:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget http:&#x2F;&#x2F;www.harding.motd.ca&#x2F;autossh&#x2F;autossh-1.4e.tgzgunzip -c autossh-1.4e.tgz | tar xvf -cd autossh-1.4e.&#x2F;configuremakesudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="断线免密登录自动重连"><a href="#断线免密登录自动重连" class="headerlink" title="断线免密登录自动重连"></a>断线免密登录自动重连</h5><p>ssh 反向链接会因为超时而关闭，如果关闭了那从外网连通内网的通道就无法维持，为此我们需要结合免密码登录及 AutoSSH 来提供稳定的 ssh 反向代理隧道。</p><p>1、在内网主机 A 上产生公钥和私钥</p><p><code>ssh-keygen</code><br>然后按三次回车执行默认选项生成公钥和私钥。会生成密钥文件和私钥文件 id_rsa,id_rsa.pub 或 id_dsa,id_dsa.pub</p><p>2、拷贝秘钥 在内网主机 A 上继续执行如下命令，将内网主机 A 上的秘钥文件 copy 到公网主机 B 中。</p><p><code>ssh-copy-id  username@ip</code><br>其中“username”是公网主机 B 的用户名，ip 为公网主机 B 的 ip，然后按照提示输入公网主机 B 的密码就完成了。</p><p>启动autossh</p><p><strong>注意</strong></p><p><strong>前提是公网服务器的22001端口（也可自定义）已经开放，没有的话先去设置安全组</strong></p><pre class="line-numbers language-none"><code class="language-none">autossh -M 4010 -NR 10022:localhost:22  root@XXX.XXX.XXX.XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数解释：</strong></p><ul><li>“-M 4010”意思是使用内网主机 A 的 4010 端口监视 SSH 连接状态，连接出问题了会自动重连</li><li>“ -N”意思是不执行远程命令</li><li>“-R”意思是将远程主机（公网主机 B）的某个端口转发到本地指定机器的指定端口</li></ul><p>代码解释：</p><p>“22001:localhost:4000”意思是将内网主机 A 的 4000 号端口转发至公网主机 B 的 22001 号端口上<br>“username@xxx.xxx.xxx.xxx”意思是公网主机 B 的用户名和 IP<br>“-p xxxx”意思是公网主机 B 的 SSH 端口，如果是默认的 22 号端口，则可以不输入.<br>查看端口情况</p><p><code>lsof -i:4010</code></p><h2 id="AutoSSH-during-boot-with-systemd"><a href="#AutoSSH-during-boot-with-systemd" class="headerlink" title="AutoSSH during boot with systemd"></a>AutoSSH during boot with systemd</h2><p>If you want a permanent SSH tunnel already created during boot time, you will (nowadays) have to create a systemd service and enable it. There is however an important thing to note about systemd and AutoSSH: <code>-f</code> (background usage) already implies <code>AUTOSSH_GATETIME=0</code>, however <code>-f</code> is not supported by systemd.</p><blockquote><p><a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html">http://www.freedesktop.org/software/systemd/man/systemd.service.html</a><br>[…] running programs in the background using “&amp;”, and other elements of shell syntax are not supported.</p></blockquote><p>So in the case of <code>systemd</code> we need to make use of <code>AUTOSSH_GATETIME</code>. Let’s look at a very basic service:</p><pre class="line-numbers language-none"><code class="language-none">$ vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;autossh-ssh-tunnel.service$ sudo nano &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;autossh-ssh-tunnel.service[Unit]Description&#x3D;AutoSSH service for remote tunnelAfter&#x3D;network.target[Service]Environment&#x3D;&quot;AUTOSSH_GATETIME&#x3D;0&quot;User&#x3D;rootExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;autossh -M 4010 -NR 10022:localhost:22  root@39.106.68.XXX[Install]WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tell systemd that we have added some stuff:</p><pre class="line-numbers language-none"><code class="language-none">systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Start the service</p><pre class="line-numbers language-none"><code class="language-none">systemctl start autossh-ssh-tunnel.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Enable during boot time</p><pre class="line-numbers language-none"><code class="language-none">systemctl enable autossh-ssh-tunnel.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;参考链接 &lt;a href=&quot;https://www.everythingcli.org/ssh-tunnelling-for-fun-and-profit-autossh/&quot;&gt;https://www.everythingcli.org/ssh-tu</summary>
      
    
    
    
    <category term="SSH tunnel" scheme="https://knowledge-things.github.io/categories/SSH-tunnel/"/>
    
    
    <category term="autossh" scheme="https://knowledge-things.github.io/tags/autossh/"/>
    
  </entry>
  
  <entry>
    <title>VPN 心跳保护</title>
    <link href="https://knowledge-things.github.io/2022/10/25/vpn-xin-tiao-bao-hu/"/>
    <id>https://knowledge-things.github.io/2022/10/25/vpn-xin-tiao-bao-hu/</id>
    <published>2022-10-25T03:43:22.000Z</published>
    <updated>2022-10-25T03:44:02.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VPN-心跳保护"><a href="#VPN-心跳保护" class="headerlink" title="VPN 心跳保护"></a>VPN 心跳保护</h2><ul><li><p>添加ppp0网络检测<br><code>nano health_vpn.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bash# &quot;100%&quot;在ping的输出结果中(证明未ping该网段)if ping -w 1 -c 3 192.168.42.1 | grep &quot;100%&quot; &gt;&#x2F;dev&#x2F;null  #未ping通则重启网卡,并重新添加路由表then        echo &quot;192.168.42.1 is Not reachable&quot;        echo &quot;restart docker vpn-client ...&quot;        docker restart vpn-client        echo &quot;ending start vpn...&quot;#ping通则不作处理else        echo &quot;192.168.42.1 is reachable&quot;fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#添加执行权限chmod +x health_vpn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>crontab -e 选择要使用的vi工具</p></li><li><p>添加定时计划</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* * * * * sleep 10; &#x2F;home&#x2F;rtzh&#x2F;health_vpn.sh  &gt;&gt;&#x2F;tmp&#x2F;health-vpn.txt#验证成功后可关闭日志，避免日志文件过大* * * * * sleep 10; &#x2F;home&#x2F;rtzh&#x2F;health_vpn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重启cron服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo service cron restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看是否启动成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status croncrontab -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="打开cron日志"><a href="#打开cron日志" class="headerlink" title="打开cron日志"></a>打开cron日志</h2><p>Ubuntu系统默认是不打开cron日志的</p><p>如何打开，很简单，控制台输入</p><p><code>vi /etc/rsyslog.d/50-default.conf</code></p><p>打开文件，在文件中找到cron.*，把前面的#去掉，保存退出，输入</p><p><code>sudo service rsyslog restart</code></p><p>重启系统日志，然后稍微等下应该就能在/var/log目录下看到cron.log，vi cron.log就可以查看cron运行日志了。</p><pre class="line-numbers language-none"><code class="language-none">tail -f &#x2F;var&#x2F;log&#x2F;cron.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VPN-心跳保护&quot;&gt;&lt;a href=&quot;#VPN-心跳保护&quot; class=&quot;headerlink&quot; title=&quot;VPN 心跳保护&quot;&gt;&lt;/a&gt;VPN 心跳保护&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加ppp0网络检测&lt;br&gt;&lt;code&gt;nano health_vpn.s</summary>
      
    
    
    
    <category term="Linux" scheme="https://knowledge-things.github.io/categories/Linux/"/>
    
    <category term="VPN" scheme="https://knowledge-things.github.io/categories/Linux/VPN/"/>
    
    
    <category term="vpn client" scheme="https://knowledge-things.github.io/tags/vpn-client/"/>
    
  </entry>
  
  <entry>
    <title>阅读记录（2022年10月）</title>
    <link href="https://knowledge-things.github.io/2022/10/20/yue-du-ji-lu/"/>
    <id>https://knowledge-things.github.io/2022/10/20/yue-du-ji-lu/</id>
    <published>2022-10-20T08:21:11.000Z</published>
    <updated>2022-11-24T10:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022-10-20"><a href="#2022-10-20" class="headerlink" title="2022-10-20"></a>2022-10-20</h2><ul><li><strong>mmdection环境搭建</strong><br><a href="https://pytorch.org/get-started/previous-versions/">PyThorch历史版本安装</a><br><a href="https://blog.csdn.net/Singlepledge/article/details/107138749">Ubuntu 20.04 : 几个BT下载软件和命令</a><br><a href="https://blog.csdn.net/weixin_45385568/article/details/115084264">ubuntu20.04显卡驱动 cuda cudnn安装</a><br><a href="https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html">cudnn安装</a><br><a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA历史版本官方下载地址</a><br><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">显卡驱动与CUDA版本对应关系</a><br><a href="https://blog.csdn.net/Yana_Zeng/article/details/119539835">pytorch安装</a><br><a href="https://pytorch.org/get-started/previous-versions/">pytorch历史版本</a><br><a href="https://blog.csdn.net/qq_26794857/article/details/111878108">NCCL安装</a></li></ul><h2 id="2022-10-21"><a href="#2022-10-21" class="headerlink" title="2022-10-21"></a>2022-10-21</h2><p>  <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker">Nvidia-docker install guide</a><br>  <a href="https://support.strongvpn.com/hc/en-us/articles/360039667713-IKEv2-Setup-Ubuntu-18-and-above-on-Command-Line">Ubuntu IPSec vpn安装</a><br>  <a href="https://hub.docker.com/r/fengzhou/ipsec-vpn-client">ipsec-vpn-client docker</a></p><h2 id="2022-10-24"><a href="#2022-10-24" class="headerlink" title="2022-10-24"></a>2022-10-24</h2><p>  <a href="https://blog.csdn.net/qq_41627642/article/details/124803970">Swin-Transformer-Object-Detection V2.11.0环境搭建</a><br>  <a href="https://blog.csdn.net/CSDN_X_W/article/">Swin Transformer Object Detection 目标检测-1</a><br>  <a href="https://blog.csdn.net/weixin_44347020/article/details/116153242">基于mmdetection训练Swin Transformer Object Detection</a><br>  <a href="https://github.com/microsoft/Swin-Transformer">Swin-Transformer</a></p><h2 id="2022-10-27"><a href="#2022-10-27" class="headerlink" title="2022-10-27"></a>2022-10-27</h2><p>  <a href="https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html">PaddlePaddle安装包</a><br>  <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/version/cudnn_cn.html">PaddlePaddle Api</a><br>  <a href="https://github.com/alibaba/EasyCV/blob/master/docs/source/data_hub.md">alibaba EasyCV datahub</a><br>  <a href="https://blog.csdn.net/qq_38410428/article/details/103645212">遥感数据集</a><br>  <a href="https://xie.infoq.cn/article/3c4afe81a2e2693eb23406752">alibaba EasyCV datahub</a><br>  <a href="https://github.com/mcordts/cityscapesScripts">Cityscapes数据集</a><br>  <a href="https://blog.csdn.net/hanruiding/article/details/89493466">按文件大小排序</a></p><h2 id="2022-11-1"><a href="#2022-11-1" class="headerlink" title="2022-11-1"></a>2022-11-1</h2><p>  <a href="https://blog.csdn.net/weixin_43152331/article/details/124929760">conda自动补全</a><br>  <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/version/cudnn_cn.html">Paddle cudnn</a></p><h2 id="2022-11-2"><a href="#2022-11-2" class="headerlink" title="2022-11-2"></a>2022-11-2</h2><p>  <a href="https://blog.csdn.net/qq_40265247/article/details/121275111">数据集处理</a><br>  <a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo插入图片</a><br>  <a href="https://aistudio.baidu.com/aistudio/projectdetail/1422430?channelType=0&amp;channel=0">PaddleDetection源码解析</a><br>  <a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">VSCode theme</a></p><h2 id="2022-11-3"><a href="#2022-11-3" class="headerlink" title="2022-11-3"></a>2022-11-3</h2><p>  <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/distributed/launch_cn.html">Paddle多机多卡训练</a><br>  <a href="https://www.paddlepaddle.org.cn/inference/v2.4/guides/install/download_lib.html">Cuda cuDNN TensorRT Paddle_Inference依赖关系</a><br>  <a href="https://docs.nvidia.com/deeplearning/tensorrt/archives/tensorrt-801/install-guide/index.html">TensorRT安装</a><br>  <a href="https://www.paddlepaddle.org.cn/inference/v2.4/guides/quick_start/python_demo.html">Paddle TensorRT推理验证</a><br>  <a href="https://www.paddlepaddle.org.cn/inference/v2.4/guides/nv_gpu_infer/gpu_trt_infer.html">GPU TensorRT 加速推理(NV-GPU/Jetson)</a><br>  <a href="https://aistudio.baidu.com/aistudio/projectdetail/2213799">数据增强</a><br>  <a href="https://cocodataset.org/#download">Coco Dataset</a><br>  <a href="https://docs.onepanel.ai/docs/deployment/configuration/miniotenants/">Onepanel Configuration</a></p><h2 id="2022-11-4"><a href="#2022-11-4" class="headerlink" title="2022-11-4"></a>2022-11-4</h2><p>  <a href="https://cvat-ai.github.io/datumaro/docs/getting_started/">Dataset Management Framework</a></p><h2 id="2022-11-7"><a href="#2022-11-7" class="headerlink" title="2022-11-7"></a>2022-11-7</h2><p>  <a href="http://loginzlib2vrak5zzpcocc3ouizykn6k5qecgj2tzlnab5wcbqhembyd.onion/">打死都不说</a><br>  <a href="https://paddledetection.readthedocs.io/tutorials/GETTING_STARTED.html">PaddleDetection tutorial</a></p><h2 id="2022-11-9"><a href="#2022-11-9" class="headerlink" title="2022-11-9"></a>2022-11-9</h2><p>  <a href="https://www.cnblogs.com/makefile/p/nms.html">Non-Maximum Suppression，NMS</a></p><h2 id="2022-11-10"><a href="#2022-11-10" class="headerlink" title="2022-11-10"></a>2022-11-10</h2><p>  <a href="https://zhuanlan.zhihu.com/p/514636147">ZSH</a><br>  <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ZSH Theme</a><br>  <a href="https://blog.csdn.net/qq_44315987/article/details/112759477">JupyterLab ipykernel</a><br>  <a href="https://zhuanlan.zhihu.com/p/534555250">JupyterLab ipykernel</a></p><h2 id="2022-11-11"><a href="#2022-11-11" class="headerlink" title="2022-11-11"></a>2022-11-11</h2><p>  <a href="https://monitor.firefox.com/breaches?">firefox monitor</a></p><h2 id="2022-11-15"><a href="#2022-11-15" class="headerlink" title="2022-11-15"></a>2022-11-15</h2><p>  <a href="https://note.qidong.name/2020/05/docker-proxy/">docker proxy</a></p><h2 id="2022-11-24"><a href="#2022-11-24" class="headerlink" title="2022-11-24"></a>2022-11-24</h2><p>  <a href="https://developer.nvidia.com/zh-cn/blog/gpu-dashboards-in-jupyter-lab/">Jupyter 实验室中的 GPU 仪表板</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022-10-20&quot;&gt;&lt;a href=&quot;#2022-10-20&quot; class=&quot;headerlink&quot; title=&quot;2022-10-20&quot;&gt;&lt;/a&gt;2022-10-20&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mmdection环境搭建&lt;/strong&gt;&lt;b</summary>
      
    
    
    
    
    <category term="阅读记录" scheme="https://knowledge-things.github.io/tags/%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>microk8s曲线救国</title>
    <link href="https://knowledge-things.github.io/2022/10/14/microk8s-qu-xian-jiu-guo/"/>
    <id>https://knowledge-things.github.io/2022/10/14/microk8s-qu-xian-jiu-guo/</id>
    <published>2022-10-14T08:57:40.000Z</published>
    <updated>2022-10-14T09:01:25.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-安装前的准备"><a href="#一-安装前的准备" class="headerlink" title="一. 安装前的准备"></a>一. 安装前的准备</h2><ol><li>安装 pullk8s 工具，此工具可以通过 hub.docker.com 的 opsdockerimage 仓库下载k8s所需的 k8s.gcr.io 或 gcr.io 镜像，无需自己翻墙，每天更新一次，包括所有image 的全平台的所有tags。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sudo curl -L &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;OpsDocker&#x2F;pullk8s&#x2F;main&#x2F;pullk8s.sh&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pullk8s$ sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pullk8s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pullk8s COMMAND [NAME[:TAG|@DIGEST]] [OPTIONS]Pull gcr.io&#39;s image for hub.docker.comCommands:  check    Check gcr.io&#39;s fail pull images.  pull     Pull an image or a repositoryOptions:  --microk8s  If use MicroK8s release.Examples:  pullk8s pull gcr.io&#x2F;google_containers&#x2F;etcd:2.0.12  pullk8s pull k8s.gcr.io&#x2F;etcd:2.0.12  pullk8s pull k8s.gcr.io&#x2F;pause:3.6 --microk8s  pullk8s check --microk8s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>安装 snap ,Ubuntu 目前已经支持。</p><p>其他系统的安装见 Installing snapd | Snapcraft documentation    <a href="https://snapcraft.io/docs/installing-snapd">https://snapcraft.io/docs/installing-snapd</a></p></li></ol><h2 id="检查被屏蔽的-gcr-io-或-k8s-gcr-io-容器名称"><a href="#检查被屏蔽的-gcr-io-或-k8s-gcr-io-容器名称" class="headerlink" title="检查被屏蔽的 gcr.io 或 k8s.gcr.io 容器名称"></a>检查被屏蔽的 gcr.io 或 k8s.gcr.io 容器名称</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pullk8s check --microk8sk8s.gcr.io&#x2F;pause:3.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>此时提示的 k8s.gcr.io/pause:3.1 就是pull 失败的容器名称</p><ul><li>因 microk8s 启动需要时间，可能要执行多次才能看到失败的容器名称，</li><li>使用 pullk8s 拉取失败的镜像，并导入到 pod 空间中</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pullk8s pull k8s.gcr.io&#x2F;pause:3.1 --microk8s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-安装前的准备&quot;&gt;&lt;a href=&quot;#一-安装前的准备&quot; class=&quot;headerlink&quot; title=&quot;一. 安装前的准备&quot;&gt;&lt;/a&gt;一. 安装前的准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装 pullk8s 工具，此工具可以通过 hub.docker.com 的</summary>
      
    
    
    
    <category term="microk8s" scheme="https://knowledge-things.github.io/categories/microk8s/"/>
    
    
    <category term="pullk8s" scheme="https://knowledge-things.github.io/tags/pullk8s/"/>
    
  </entry>
  
  <entry>
    <title>install onepanel</title>
    <link href="https://knowledge-things.github.io/2022/10/14/install-onepanel/"/>
    <id>https://knowledge-things.github.io/2022/10/14/install-onepanel/</id>
    <published>2022-10-14T03:16:59.000Z</published>
    <updated>2022-10-14T08:41:21.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Install-onepanel"><a href="#Install-onepanel" class="headerlink" title="Install onepanel"></a>Install onepanel</h2><h2 id="Install-onepanel-1"><a href="#Install-onepanel-1" class="headerlink" title="Install onepanel"></a>Install onepanel</h2><blockquote><p>官方参考文档    </p><p><a href="https://docs.onepanel.ai/docs/deployment/configuration/files/">https://docs.onepanel.ai/docs/deployment/configuration/files/</a></p><p><a href="https://docs.onepanel.ai/docs/deployment/configuration/remote-microk8s/#configure-local-dns">https://docs.onepanel.ai/docs/deployment/configuration/remote-microk8s/#configure-local-dns</a></p><p><a href="https://docs.onepanel.ai/docs/deployment/configuration/remote-microk8s/">https://docs.onepanel.ai/docs/deployment/configuration/remote-microk8s/</a></p><p>Git Blog</p></blockquote><p><strong>1    Install microk8s using the command line</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo snap install microk8s --channel&#x3D;1.21&#x2F;stable --classicsudo snap alias microk8s.kubectl kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2 Make sure your current user has permissions to work with <code>microk8s</code>.</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo usermod -a -G microk8s $USERsudo chown -f -R $USER ~.&#x2F;kube<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Configuring the proxy environment variables</strong></p><p><em>启用proxy后需要在安装k8s基础容器后关闭代理</em></p><p>修改配置文件<code>/etc/environment</code> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sudo nano &#x2F;etc&#x2F;environmentHTTPS_PROXY&#x3D;http:&#x2F;&#x2F;squid.internal:3128HTTP_PROXY&#x3D;http:&#x2F;&#x2F;squid.internal:3128NO_PROXY&#x3D;10.0.0.0&#x2F;8,192.168.0.0&#x2F;16,127.0.0.1,172.16.0.0&#x2F;16https_proxy&#x3D;http:&#x2F;&#x2F;squid.internal:3128http_proxy&#x3D;http:&#x2F;&#x2F;squid.internal:3128no_proxy&#x3D;10.0.0.0&#x2F;8,192.168.0.0&#x2F;16,127.0.0.1,172.16.0.0&#x2F;16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>we need to configure <code>NO_PROXY</code> and <code>no_proxy</code> with the IP ranges the pods and services occupy</p><p>For the changes to take effect we need to restart MicroK8s:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s stopmicrok8s start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Wait for it to be ready.</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s status --wait-ready<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3 Enable the following required add-ons:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo microk8s enable storage dns rbac<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4 Update API server config<code>(optional)</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo nano &#x2F;var&#x2F;snap&#x2F;microk8s&#x2F;current&#x2F;args&#x2F;kube-apiserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Add to the top</p><pre class="line-numbers language-none"><code class="language-none">--service-account-signing-key-file&#x3D;$&#123;SNAP_DATA&#125;&#x2F;certs&#x2F;serviceaccount.key--service-account-key-file&#x3D;$&#123;SNAP_DATA&#125;&#x2F;certs&#x2F;serviceaccount.key--service-account-issuer&#x3D;api--service-account-api-audiences&#x3D;api,nats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Restart microk8s for the changes to take effect</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s stop &amp;&amp; microk8s start &amp;&amp; microk8s status --wait-ready<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>5 Enable microk8s addons</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo microk8s enable storage dns rbacmicrok8s status --wait-ready<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Check <code>node</code> and <code>pod</code> status</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-------------node status----------root@rtzh-virtual-k8s:~# sudo microk8s.kubectl get nodeNAME               STATUS   ROLES    AGE   VERSIONrtzh-virtual-k8s   Ready    &lt;none&gt;   18m   v1.21.13-3+cbc10c94808907------------pod status-------------root@rtzh-virtual-k8s:~# sudo microk8s.kubectl get pod --all-namespaces NAMESPACE     NAME                                      READY   STATUS    RESTARTS   AGEkube-system   calico-kube-controllers-f7868dd95-hfmz5   1&#x2F;1     Running   0          19mkube-system   calico-node-k8kk6                         1&#x2F;1     Running   0          19mkube-system   hostpath-provisioner-566686b959-lk6hg     1&#x2F;1     Running   0          2m55skube-system   coredns-7f9c69c78c-2fsrt                  1&#x2F;1     Running   0          2m53s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Configure DNS</strong></p><p>i. Edit the resolvconf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo nano &#x2F;var&#x2F;snap&#x2F;microk8s&#x2F;current&#x2F;args&#x2F;kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Add to the top</p><pre class=" language-lang---resolv-conf=/run/systemd/resolve/resolv.conf```"><code class="language-lang---resolv-conf=/run/systemd/resolve/resolv.conf```">ii. Edit coredns configmap so we point to the resolv.conf file<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s kubectl edit cm coredns -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>Set the forward section to:```forward . /etc/resolv.conf 8.8.8.8  8.8.4.4</code></pre><p>iii. Restart microk8s</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s stop &amp;&amp; microk8s start &amp;&amp; microk8s status --wait-ready<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Install-Onepanel"><a href="#Install-Onepanel" class="headerlink" title="Install Onepanel#"></a>Install Onepanel<a href="https://docs.onepanel.ai/docs/deployment/configuration/remote-microk8s#install-onepanel">#</a></h2><ol><li><p>Install</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># startvpncurl -sLO https:&#x2F;&#x2F;github.com&#x2F;onepanelio&#x2F;onepanel&#x2F;releases&#x2F;latest&#x2F;download&#x2F;opctl-linux-amd64chmod +x opctl-linux-amd64sudo mv .&#x2F;opctl-linux-amd64 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;opctl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Initialize Onepanel</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">opctl init --provider microk8s \--enable-metallb \--artifact-repository-provider s3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>params.yaml</code>按照模板中的说明进行填充，并参阅<a href="https://docs.onepanel.ai/docs/deployment/configuration/files#sections">配置文件部分</a>以获取更多详细信息。</p><pre class="line-numbers language-none"><code class="language-none"># - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# Generated with Onepanel CLI # CLI version: v1.0.2# Command: opctl init --provider microk8s --enable-metallb --artifact-repository-provider s3# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# Component: Onepanel# Description: Onepanel application information# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -application:  defaultNamespace: example  domain: onepanel.test  fqdn: app.onepanel.test  insecure: true  nodePool:    label: node.kubernetes.io&#x2F;instance-type    options:      - name: &#39;Local machine&#39;        value: &#39;local&#39;  provider: microk8s# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# Component: Artifact repository# Description: S3 compatible object storage for storing files across Onepanel# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -artifactRepository:  s3:    # S3 access key    accessKey: &#39;minio&#39;    # Name of bucket, example: my-bucket    bucket: &#39;mybucket&#39; # Your bucket here    endpoint: &#39;minio.example.svc.cluster.local&#39; # replace &#96;example&#96; with your namespace    # Change to true if endpoint does NOT support HTTPS    insecure: true    # Key Format for objects stored by Workflows. This can reference Workflow variables    keyFormat: artifacts&#x2F;&#123;&#123;workflow.namespace&#125;&#125;&#x2F;&#123;&#123;workflow.name&#125;&#125;&#x2F;&#123;&#123;pod.name&#125;&#125;    publicEndpoint: 10.1.131.146:9000 # The IP address from minio    # Bucket region, this can be anything since it is running locally    region: us-west-2    # S3 secret key    secretKey: &#39;minio123&#39;# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# Component: cert-manager# Description: automatically creates and renews TLS certificates using Let&#39;s Encrypt# Docs: https:&#x2F;&#x2F;onepanelio.github.io&#x2F;core-docs&#x2F;docs&#x2F;deployment&#x2F;configuration&#x2F;tls# CLI flag: --enable-cert-manager# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -certManager:  email: test@test.com # Not used in local deployments as certs are generated locally# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -# Component: Application and kubernetes load balancing on non-cloud deployments.# Description: MetalLB, LoadBalancer# CLI flag: --enable-metallb# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -metalLb:  addresses:    - 192.168.99.0&#x2F;32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Deploy onepanel</p><blockquote><p><code>issue</code> kfserving controller image pull unauthorized</p></blockquote><p>Modifying the kfserving version before deploying onepanel</p><p>If you have already executed <code>kubeconfig opctl apply</code>, delete  cache file </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm -rf .onepanel&#x2F;kubernetes.yamlrm -rf .onepanel&#x2F;manifests&#x2F;cache&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">nano .onepanel&#x2F;manifests&#x2F;v1.0.2&#x2F;kfserving&#x2F;base&#x2F;kfserving.yaml# change- gcr.io&#x2F;kfserving&#x2F;kfserving-controller:v0.6.0to+ kfserving&#x2F;kfserving-controller:v0.6.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s config &gt; kubeconfigKUBECONFIG&#x3D;.&#x2F;kubeconfig opctl apply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="Expose-Onepanel-using-Nginx"><a href="#Expose-Onepanel-using-Nginx" class="headerlink" title="Expose Onepanel using Nginx"></a>Expose Onepanel using Nginx</h2><p>First, install nginx.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get install nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then, configure nginx to expose Onepanel</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo nano &#x2F;etc&#x2F;nginx&#x2F;sites-available&#x2F;default <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Change this</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location &#x2F; &#123;        # First attempt to serve request as file, then        # as directory, then fall back to displaying a 404.        try_files $uri $uri&#x2F; &#x3D;404;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>to</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location &#x2F; &#123;  client_max_body_size 0; # No size limit to upload requests      proxy_pass http:&#x2F;&#x2F;192.168.99.0; # the ip address you gave metallb  proxy_set_header Host $host;  proxy_http_version 1.1;  proxy_set_header Upgrade $http_upgrade;  proxy_set_header Connection &quot;upgrade&quot;;  proxy_request_buffering off;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Then, stop editing and run</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Configure-Local-DNS"><a href="#Configure-Local-DNS" class="headerlink" title="Configure Local DNS"></a>Configure Local DNS</h2><p><code>/etc/hosts</code></p><p>添加一行</p><p>For this example, we will assume the IP is: 10.9.98.213</p><pre class="line-numbers language-none"><code class="language-none"># &lt;ip&gt; &lt;fqdn&gt;10.9.98.213 app.onepanel.test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>常用命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">microk8s.kubectl describe node# Describe a nodemicrok8s.kubectl describe node ml#跟踪Node节点信息microk8s.kubectl describe pods -A #显示所有pod信息microk8s.kubectl describe pod kfserving-controller-manager-0 -n kfserving-system  #显示指定pod详细信息microk8s.kubectl delete deployment kfserving-models-web-app -n kfserving-system #删除deploymentmicrok8s.kubectl delete pod kfserving-controller-manager-0 -n kfserving-system #删除podmicrok8s.kubectl get pods --all-namespaces #同下microk8s kubectl get pods -A# 获取所有pod执行状态microk8s kubectl get deployment -A# 查看所有部署microk8s stop &amp;&amp; microk8s start &amp;&amp; microk8s status --wait-ready  #重启microk8s.kubectl logs -f onepanel-core-ui-7d9b8d5954-bbtzv -n onepanel#查看日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Install-onepanel&quot;&gt;&lt;a href=&quot;#Install-onepanel&quot; class=&quot;headerlink&quot; title=&quot;Install onepanel&quot;&gt;&lt;/a&gt;Install onepanel&lt;/h2&gt;&lt;h2 id=&quot;Install-o</summary>
      
    
    
    
    <category term="kubernetes" scheme="https://knowledge-things.github.io/categories/kubernetes/"/>
    
    
    <category term="onepanel" scheme="https://knowledge-things.github.io/tags/onepanel/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu install vnc</title>
    <link href="https://knowledge-things.github.io/2022/10/13/ubuntu-install-vnc/"/>
    <id>https://knowledge-things.github.io/2022/10/13/ubuntu-install-vnc/</id>
    <published>2022-10-13T06:15:59.000Z</published>
    <updated>2022-10-13T06:18:56.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Install-and-Configure-a-VNC-in-Ubuntu"><a href="#Install-and-Configure-a-VNC-in-Ubuntu" class="headerlink" title="Install and Configure a VNC in Ubuntu"></a>Install and Configure a VNC in Ubuntu</h3><p>To install <strong>TigerVNC</strong> server and other associated packages in Ubuntu, run the following command.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sudo apt install tigervnc-standalone-server tigervnc-common tigervnc-xorg-extension tigervnc-viewer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Now start the VNC server by running the <strong>vncserver</strong> command as a normal user. This action will create the initial configuration stored in the <code>$HOME/.vnc</code> directory and it will also prompt you to set up a login password.</p><p>Enter a password (which must be at least six characters length) and confirm/verify it. Then set a view-only password if you wish, as follows.</p><pre class="line-numbers language-none"><code class="language-none">$ vncserver$ ls -l ~&#x2F;.vnc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Next, we need to configure the DE to work with the VNC <strong>server. So, stop the \</strong>VNC*<em> server using the following command, in order to perform some configurations.*</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vncserver -kill :1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To configure <strong>GNOME</strong> or whatever desktop you have installed, create a file called <strong>xstartup</strong> under the configurations directory using your <a href="https://www.tecmint.com/linux-command-line-editors/">favorite text editor</a>.</p><pre class="line-numbers language-none"><code class="language-none">$ vi ~&#x2F;.vnc&#x2F;xstartup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Add the following lines in the file. These commands will be automatically executed whenever you start or restart the TigerVNC server. Note that the commands may vary depending on the DE you installed.</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;shexec &#x2F;etc&#x2F;vnc&#x2F;xstartupxrdb $HOME&#x2F;.Xresourcesvncconfig -iconic &amp;dbus-launch --exit-with-session gnome-session &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Save the file and set the appropriate permission on the file so it can be executed.</p><pre class="line-numbers language-none"><code class="language-none">$ chmod 700 ~&#x2F;.vnc&#x2F;xstartup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Next, start the <strong>VNC</strong> server by running the following command as a normal user. Set your own values for the display geometry. In addition, use the <code>-localhost</code> flag to allow connections from the <strong>localhost</strong> only and by analogy, only from users authenticated on the server.</p><p>In addition, <strong>VNC</strong> by default uses TCP port <code>5900+N</code>, where <code>N</code> is the display number. In this case, the <code>:1</code> means that the VNC server will run on display port number <strong>5901</strong>.</p><pre class="line-numbers language-none"><code class="language-none">$ vncserver :1 -localhost -geometry 1024x768 -depth 32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To list <strong>VNC</strong> server sessions on your system, run the following command.</p><pre class="line-numbers language-none"><code class="language-none">$ vncserver -list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Once the VNC server has started, check the port it is running on with the <a href="https://www.tecmint.com/20-netstat-commands-for-linux-network-management/">netstat command</a>.</p><pre class="line-numbers language-none"><code class="language-none">$ netstat -tlnp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">vncserver -localhost no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Install-and-Configure-a-VNC-in-Ubuntu&quot;&gt;&lt;a href=&quot;#Install-and-Configure-a-VNC-in-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Install and Config</summary>
      
    
    
    
    <category term="linux" scheme="https://knowledge-things.github.io/categories/linux/"/>
    
    
    <category term="remote vnc" scheme="https://knowledge-things.github.io/tags/remote-vnc/"/>
    
  </entry>
  
  <entry>
    <title>microk8s安装onepanel</title>
    <link href="https://knowledge-things.github.io/2022/10/13/microk8s-an-zhuang-onepanel/"/>
    <id>https://knowledge-things.github.io/2022/10/13/microk8s-an-zhuang-onepanel/</id>
    <published>2022-10-13T03:11:42.000Z</published>
    <updated>2022-10-13T03:11:42.217Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Kubernetes-Dashboard</title>
    <link href="https://knowledge-things.github.io/2022/10/10/kubernetes-dashboard/"/>
    <id>https://knowledge-things.github.io/2022/10/10/kubernetes-dashboard/</id>
    <published>2022-10-10T02:24:22.000Z</published>
    <updated>2022-10-10T02:31:56.507Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-部署和访问-Kubernetes-仪表板"><a href="#1-部署和访问-Kubernetes-仪表板" class="headerlink" title="1.部署和访问 Kubernetes 仪表板"></a>1.部署和访问 Kubernetes 仪表板</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo curl -fsSLo recommended.yaml https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;dashboard&#x2F;v2.6.1&#x2F;aio&#x2F;deploy&#x2F;recommended.yaml#修改刚下载的yaml文件，添加type: NodePort -&gt; 外网访问$ vim recommended.yaml# ------------------- Dashboard Service ------------------- #kind: ServiceapiVersion: v1metadata:  labels:    k8s-app: kubernetes-dashboard  name: kubernetes-dashboard  namespace: kubernetes-dashboardspec:  ports:    - port: 443      targetPort: 8443  selector:    k8s-app: kubernetes-dashboard  type: NodePort----------------------------------------------------------------# create -f 创建dashboard$ kubectl create -f recommended.yaml# 查看namespace为kubernetes-dashboard下创建的pods$ kubectl get pods -n kubernetes-dashboard--------------------------------------------------------------------------NAME                                    READY   STATUS    RESTARTS   AGEkubernetes-dashboard-5fd74ddbcd-2m4j6   1&#x2F;1     Running   0          3d23h$ kubectl proxy &amp;# Starting to serve on 127.0.0.1:8001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Access Control:</strong> 创建一个admin账号，否则进去之后无法观测各个小集群的信息(没有admin权限登录后各个界面都没有集群信息)</p><pre class="line-numbers language-applescript" data-language="applescript"><code class="language-applescript">$ vim dashboard_admin.yaml# *** 请替换为你想创建的名字----------------------------------------apiVersion: rbac.authorization.k8s.io&#x2F;v1kind: ClusterRoleBindingmetadata:  name: ***  namespace: kubernetes-dashboardroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: cluster-adminsubjects:  - kind: ServiceAccount    name: ***    namespace: kubernetes-dashboard-----------------------------------------$ kubectl create -f dashboard_admin.yaml# 查找名为*** secret token$ kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep ***| awk &#39;&#123;print $1&#125;&#39;)----------------------------------------------------token:   eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJl.....# 复制这长一串的token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Chrome可能回因为证书问题无法访问</em></p><pre class="line-numbers language-autohotkey" data-language="autohotkey"><code class="language-autohotkey">在chrome该页面上，直接键盘敲入这12个字符：&#96;thisisunsafe&#96;**注意：鼠标点击当前页面任意位置，让页面处于最上层即可输入**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-通过局域网访问"><a href="#2-通过局域网访问" class="headerlink" title="2.通过局域网访问"></a>2.通过局域网访问</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl port-forward -n kubernetes-dashboard --address 0.0.0.0 service&#x2F;kubernetes-dashboard 8080:443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建一个dashboard管理用户</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create serviceaccount dashboard-admin -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>绑定用户为集群管理用户</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create clusterrolebinding dashboard-cluster-admin --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kube-system:dashboard-admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完以上操作后,由于管理用户的名称为<code>dashboard-admin</code>,生成的对应的secret的值则为<code>dashboard-admin-token-随机字符串</code>我的机器上完整名称为<code>dashboard-admin-token-sg6bp</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[centos@k8s-master dashboard]$ kubectl get secret -n&#x3D;kube-system |grep dashboard-admin-tokendashboard-admin-token-sg6bp                      kubernetes.io&#x2F;service-account-token   3      23h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到这个secret的完整名称,或者不使用grep管道,列出所有的secrets,然后从中寻找需要的.</p><p>通过上面介绍过的<code>kubectl describe secret</code>命令查看token</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[centos@k8s-master dashboard]$ kubectl describe -n&#x3D;kube-system  secret dashboard-admin-token-sg6bpName:         dashboard-admin-token-sg6bpNamespace:    kube-systemLabels:       &lt;none&gt;Annotations:  kubernetes.io&#x2F;service-account.name: dashboard-admin              kubernetes.io&#x2F;service-account.uid: c60d2a65-619e-11e9-a627-0050568417a2Type:  kubernetes.io&#x2F;service-account-tokenData&#x3D;&#x3D;&#x3D;&#x3D;ca.crt:     1025 bytesnamespace:  11 bytestoken:      eyJhbGciOiJSUzI1NiIsImtp...[centos@k8s-master dashboard]$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把以上token复制到登陆页面的token栏里,就可以登陆了.登陆以后就可以看到如上面最后展示的有完整信息的界面.</p><h5 id="3-获取token"><a href="#3-获取token" class="headerlink" title="3.获取token"></a>3.获取token</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get secret -n&#x3D;kube-system |grep dashboard-admin-tokenkubectl describe -n&#x3D;kube-system  secret dashboard-admin-token-t854k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-部署和访问-Kubernetes-仪表板&quot;&gt;&lt;a href=&quot;#1-部署和访问-Kubernetes-仪表板&quot; class=&quot;headerlink&quot; title=&quot;1.部署和访问 Kubernetes 仪表板&quot;&gt;&lt;/a&gt;1.部署和访问 Kubernetes 仪</summary>
      
    
    
    
    <category term="kubernetes" scheme="https://knowledge-things.github.io/categories/kubernetes/"/>
    
    
    <category term="dashboard" scheme="https://knowledge-things.github.io/tags/dashboard/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes-kubectl安装</title>
    <link href="https://knowledge-things.github.io/2022/10/08/kubernetes-kubectl-an-zhuang/"/>
    <id>https://knowledge-things.github.io/2022/10/08/kubernetes-kubectl-an-zhuang/</id>
    <published>2022-10-08T07:14:12.000Z</published>
    <updated>2022-10-08T07:30:32.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在-Linux-系统中安装并设置-kubectl"><a href="#在-Linux-系统中安装并设置-kubectl" class="headerlink" title="在 Linux 系统中安装并设置 kubectl"></a>在 Linux 系统中安装并设置 kubectl</h1><h2 id="准备开始"><a href="#准备开始" class="headerlink" title="准备开始"></a>准备开始</h2><p>kubectl 版本和集群版本之间的差异必须在一个小版本号内。 例如：v1.25 版本的客户端能与 v1.24、 v1.25 和 v1.26 版本的控制面通信。 用最新兼容版的 kubectl 有助于避免不可预见的问题。</p><h2 id="在-Linux-系统中安装-kubectl"><a href="#在-Linux-系统中安装-kubectl" class="headerlink" title="在 Linux 系统中安装 kubectl"></a>在 Linux 系统中安装 kubectl</h2><p>在 Linux 系统中安装 kubectl 有如下几种方法：</p><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/_print/#install-kubectl-binary-with-curl-on-linux">用 curl 在 Linux 系统中安装 kubectl</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/_print/#install-using-native-package-management">用原生包管理工具安装</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/_print/#install-using-other-package-management">用其他包管理工具安装</a></li></ul><h3 id="用-curl-在-Linux-系统中安装-kubectl"><a href="#用-curl-在-Linux-系统中安装-kubectl" class="headerlink" title="用 curl 在 Linux 系统中安装 kubectl"></a>用 curl 在 Linux 系统中安装 kubectl</h3><ol><li><p>用以下命令下载最新发行版：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -LO &quot;https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;$(curl -L -s https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable.txt)&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明：</strong></p><p>如需下载某个指定的版本，请用指定版本号替换该命令的这一部分： <code>$(curl -L -s https://dl.k8s.io/release/stable.txt)</code>。</p><p>例如，要在 Linux 中下载 v1.25.0 版本，请输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -LO https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;v1.25.0&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证该可执行文件（可选步骤）</p><p>下载 kubectl 校验和文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -LO &quot;https:&#x2F;&#x2F;dl.k8s.io&#x2F;$(curl -L -s https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable.txt)&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl.sha256&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基于校验和文件，验证 kubectl 的可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo &quot;$(cat kubectl.sha256)  kubectl&quot; | sha256sum --check<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证通过时，输出为：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">kubectl: OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证失败时，<code>sha256</code> 将以非零值退出，并打印如下输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl: FAILEDsha256sum: WARNING: 1 computed checksum did NOT match<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>下载的 kubectl 与校验和文件版本必须相同。</p></li><li><p>安装 kubectl</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo install -o root -g root -m 0755 kubectl &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明：</strong></p><p>即使你没有目标系统的 root 权限，仍然可以将 kubectl 安装到目录 <code>~/.local/bin</code>中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod +x kubectlmkdir -p ~&#x2F;.local&#x2F;binmv .&#x2F;kubectl ~&#x2F;.local&#x2F;bin&#x2F;kubectl# 之后将 ~&#x2F;.local&#x2F;bin 附加（或前置）到 $PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行测试，以保障你安装的版本是最新的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl version --client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用如下命令来查看版本的详细信息：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">kubectl version --client --output&#x3D;yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="用原生包管理工具安装"><a href="#用原生包管理工具安装" class="headerlink" title="用原生包管理工具安装"></a>用原生包管理工具安装</h3><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-install-0">基于 Debian 的发行版</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-install-1">基于 Red Hat 的发行版</a></li></ul><ol><li><p>更新 <code>apt</code> 包索引，并安装使用 Kubernetes <code>apt</code> 仓库所需要的包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get updatesudo apt-get install -y ca-certificates curl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你使用 Debian 9（stretch）或更早版本，则你还需要安装 <code>apt-transport-https</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get install -y apt-transport-https<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下载 Google Cloud 公开签名秘钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo curl -fsSLo &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kubernetes-archive-keyring.gpg https:&#x2F;&#x2F;packages.cloud.google.com&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加 Kubernetes <code>apt</code> 仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo &quot;deb [signed-by&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kubernetes-archive-keyring.gpg] https:&#x2F;&#x2F;apt.kubernetes.io&#x2F; kubernetes-xenial main&quot; | sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新 <code>apt</code> 包索引，使之包含新的仓库并安装 kubectl：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt-get updatesudo apt-get install -y kubectl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="用其他包管理工具安装"><a href="#用其他包管理工具安装" class="headerlink" title="用其他包管理工具安装"></a>用其他包管理工具安装</h3><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#other-kubectl-install-0">Snap</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#other-kubectl-install-1">Homebrew</a></li></ul><p>如果你使用的 Ubuntu 或其他 Linux 发行版，内建支持 <a href="https://snapcraft.io/docs/core/install">snap</a> 包管理工具， 则可用 <a href="https://snapcraft.io/">snap</a> 命令安装 kubectl。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">snap install kubectl --classickubectl version --client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="验证-kubectl-配置"><a href="#验证-kubectl-配置" class="headerlink" title="验证 kubectl 配置"></a>验证 kubectl 配置</h2><p>为了让 kubectl 能发现并访问 Kubernetes 集群，你需要一个 <a href="https://kubernetes.io/zh-cn/docs/concepts/configuration/organize-cluster-access-kubeconfig/">kubeconfig 文件</a>， 该文件在 <a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/kube-up.sh">kube-up.sh</a> 创建集群时，或成功部署一个 Miniube 集群时，均会自动生成。 通常，kubectl 的配置信息存放于文件 <code>~/.kube/config</code> 中。</p><p>通过获取集群状态的方法，检查是否已恰当的配置了 kubectl：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl cluster-info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果返回一个 URL，则意味着 kubectl 成功的访问到了你的集群。</p><p>如果你看到如下所示的消息，则代表 kubectl 配置出了问题，或无法连接到 Kubernetes 集群。</p><pre class="line-numbers language-none"><code class="language-none">The connection to the server &lt;server-name:port&gt; was refused - did you specify the right host or port?（访问 &lt;server-name:port&gt; 被拒绝 - 你指定的主机和端口是否有误？）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如，如果你想在自己的笔记本上（本地）运行 Kubernetes 集群，你需要先安装一个 Minikube 这样的工具，然后再重新运行上面的命令。</p><p>如果命令 <code>kubectl cluster-info</code> 返回了 url，但你还不能访问集群，那可以用以下命令来检查配置是否妥当：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl cluster-info dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="kubectl-的可选配置和插件"><a href="#kubectl-的可选配置和插件" class="headerlink" title="kubectl 的可选配置和插件"></a>kubectl 的可选配置和插件</h2><h3 id="启用-shell-自动补全功能"><a href="#启用-shell-自动补全功能" class="headerlink" title="启用 shell 自动补全功能"></a>启用 shell 自动补全功能</h3><p>kubectl 为 Bash、Zsh、Fish 和 PowerShell 提供自动补全功能，可以为你节省大量的输入。</p><p>下面是为 Bash、Fish 和 Zsh 设置自动补全功能的操作步骤。</p><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-autocompletion-0">Bash</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-autocompletion-1">Fish</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-autocompletion-2">Zsh</a></li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>kubectl 的 Bash 补全脚本可以用命令 <code>kubectl completion bash</code> 生成。 在 Shell 中导入（Sourcing）补全脚本，将启用 kubectl 自动补全功能。</p><p>然而，补全脚本依赖于工具 <a href="https://github.com/scop/bash-completion"><strong>bash-completion</strong></a>， 所以要先安装它（可以用命令 <code>type _init_completion</code> 检查 bash-completion 是否已安装）。</p><h3 id="安装-bash-completion"><a href="#安装-bash-completion" class="headerlink" title="安装 bash-completion"></a>安装 bash-completion</h3><p>很多包管理工具均支持 bash-completion（参见<a href="https://github.com/scop/bash-completion#installation">这里</a>）。 可以通过 <code>apt-get install bash-completion</code> 或 <code>yum install bash-completion</code> 等命令来安装它。</p><p>上述命令将创建文件 <code>/usr/share/bash-completion/bash_completion</code>，它是 bash-completion 的主脚本。 依据包管理工具的实际情况，你需要在 <code>~/.bashrc</code> 文件中手工导入此文件。</p><p>要查看结果，请重新加载你的 Shell，并运行命令 <code>type _init_completion</code>。 如果命令执行成功，则设置完成，否则将下面内容添加到文件 <code>~/.bashrc</code> 中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">source &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新加载 Shell，再输入命令 <code>type _init_completion</code> 来验证 bash-completion 的安装状态。</p><h3 id="启动-kubectl-自动补全功能"><a href="#启动-kubectl-自动补全功能" class="headerlink" title="启动 kubectl 自动补全功能"></a>启动 kubectl 自动补全功能</h3><h4 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h4><p>你现在需要确保一点：kubectl 补全脚本已经导入（sourced）到 Shell 会话中。 可以通过以下两种方法进行设置：</p><ul><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-bash-autocompletion-0">当前用户</a></li><li><a href="https://kubernetes.io/zh-cn/docs/tasks/tools/install-kubectl-linux/#kubectl-bash-autocompletion-1">系统全局</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo &#39;source &lt;(kubectl completion bash)&#39; &gt;&gt;~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 kubectl 有关联的别名，你可以扩展 Shell 补全来适配此别名：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo &#39;alias k&#x3D;kubectl&#39; &gt;&gt;~&#x2F;.bashrcecho &#39;complete -o default -F __start_kubectl k&#39; &gt;&gt;~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>bash-completion 负责导入 <code>/etc/bash_completion.d</code> 目录中的所有补全脚本。</p><p>两种方式的效果相同。重新加载 Shell 后，kubectl 自动补全功能即可生效。 若要在当前 Shell 会话中启用 Bash 补全功能，需要运行 <code>exec bash</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">exec bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-kubectl-convert-插件"><a href="#安装-kubectl-convert-插件" class="headerlink" title="安装 kubectl convert 插件"></a>安装 <code>kubectl convert</code> 插件</h3><p>一个 Kubernetes 命令行工具 <code>kubectl</code> 的插件，允许你将清单在不同 API 版本间转换。 这对于将清单迁移到新的 Kubernetes 发行版上未被废弃的 API 版本时尤其有帮助。 更多信息请访问 <a href="https://kubernetes.io/zh-cn/docs/reference/using-api/deprecation-guide/#migrate-to-non-deprecated-apis">迁移到非弃用 API</a></p><ol><li><p>用以下命令下载最新发行版：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -LO &quot;https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;$(curl -L -s https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable.txt)&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl-convert&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证该可执行文件（可选步骤）</p><p>下载 kubectl-convert 校验和文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -LO &quot;https:&#x2F;&#x2F;dl.k8s.io&#x2F;$(curl -L -s https:&#x2F;&#x2F;dl.k8s.io&#x2F;release&#x2F;stable.txt)&#x2F;bin&#x2F;linux&#x2F;amd64&#x2F;kubectl-convert.sha256&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基于校验和，验证 kubectl-convert 的可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">echo &quot;$(cat kubectl-convert.sha256) kubectl-convert&quot; | sha256sum --check<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证通过时，输出为：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">kubectl-convert: OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证失败时，<code>sha256</code> 将以非零值退出，并打印输出类似于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl-convert: FAILEDsha256sum: WARNING: 1 computed checksum did NOT match<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><p>下载相同版本的可执行文件和校验和。</p></li><li><p>安装 kubectl-convert</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo install -o root -g root -m 0755 kubectl-convert &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kubectl-convert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证插件是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl convert --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你没有看到任何错误就代表插件安装成功了。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;在-Linux-系统中安装并设置-kubectl&quot;&gt;&lt;a href=&quot;#在-Linux-系统中安装并设置-kubectl&quot; class=&quot;headerlink&quot; title=&quot;在 Linux 系统中安装并设置 kubectl&quot;&gt;&lt;/a&gt;在 Linux 系统中安装并</summary>
      
    
    
    
    <category term="k8s" scheme="https://knowledge-things.github.io/categories/k8s/"/>
    
    
    <category term="kubectl" scheme="https://knowledge-things.github.io/tags/kubectl/"/>
    
  </entry>
  
</feed>
