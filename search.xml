<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node—RED 启用使用身份认证登录</title>
      <link href="/2022/05/24/node-red-qi-yong-shi-yong-shen-fen-ren-zheng-deng-lu/"/>
      <url>/2022/05/24/node-red-qi-yong-shi-yong-shen-fen-ren-zheng-deng-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Node-RED 预设是无帐号与密码的，因此若建立在公开的伺服器上就是不安全的，任何人都可以透过 IP 或网域连上平台，且直接修改及部属编辑器上的节点，因此我们要运用其内建的使用者身分验证机制来保护平台的资讯安全。</p></blockquote><h3 id="编辑器和管理员-API-安全性"><a href="#编辑器和管理员-API-安全性" class="headerlink" title="编辑器和管理员 API 安全性"></a>编辑器和管理员 API 安全性</h3><p><strong>Editor</strong> 和 <strong>Admin API</strong> 支持两种类型的身份验证：</p><ul><li>基于用户名/密码凭据的身份验证</li><li>针对任何 OAuth/OpenID 提供者（例如 Twitter 或 GitHub）进行身份验证<h3 id="基于用户名-密码的身份验证"><a href="#基于用户名-密码的身份验证" class="headerlink" title="基于用户名/密码的身份验证"></a>基于用户名/密码的身份验证</h3></li></ul><p>要在 Editor 和 Admin API 上启用用户身份验证，请取消注释<em>设置文件</em><strong>adminAuth</strong> 中的属性：<br><pre class="line-numbers language-none"><code class="language-none">adminAuth: &#123;    type: &quot;credentials&quot;,    users: [        &#123;            username: &quot;admin&quot;,            password: &quot;$2a$08$zZWtXTja0fB1pzD4sHCMyOCMYz2Z6dNbM6tl8sJogENOMcxWV9DN.&quot;,            permissions: &quot;*&quot;        &#125;,        &#123;            username: &quot;george&quot;,            password: &quot;$2b$08$wuAqPiKJlVN27eF5qJp.RuQYuy6ZYONW7a&#x2F;UWYxDTtwKFCdB8F19y&quot;,            permissions: &quot;read&quot;        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>该<em>users</em>属性是一个用户对象数组。这允许您定义多个用户，每个用户都可以拥有不同的权限。</p><p>上面的这个示例配置定义了两个用户。一个被称为<em>admin</em>有权在编辑器内执行所有操作且密码为<em>password</em>. 另一个调用<em>george</em> who 被授予只读访问权限。</p><p>请注意，密码是使用 bcrypt 算法安全地散列的。</p><blockquote><p>注意：在以前的 Node-RED 版本中，该设置httpAdminAuth 可用于在编辑器上启用 HTTP 基本身份验证。此选项已弃用，不应使用。</p></blockquote><h3 id="生成密码哈希"><a href="#生成密码哈希" class="headerlink" title="生成密码哈希"></a>生成密码哈希</h3><p>如果您使用的是 Node-RED 1.1.0 或更高版本，则可以使用以下命令：</p><p><code>node-red admin hash-pw</code></p><p>对于旧版本的 Node-RED，您可以：</p><ul><li>安装单独的node-red-admin命令行工具并使用以下命令：<br>  <code>node-red-admin hash-pw</code></li><li><p>或者，找到 Node-RED 的安装目录并使用以下命令：</p><p>  <code>node -e &quot;console.log(require(&#39;bcryptjs&#39;).hashSync(process.argv[1], 8));&quot; your-password-here</code></p></li></ul><p>在所有情况下，您都会取回密码的散列版本，然后您可以将其粘贴到您的设置文件中。</p><h3 id="Where-is-my-settings-file"><a href="#Where-is-my-settings-file" class="headerlink" title="Where is my settings file?"></a>Where is my settings file?</h3><p>容器中的位置    <em>/data/settings.js</em></p><p>如果您不确定 Node-RED 使用的是哪个设置文件，则应在 Node-RED 启动时检查日志输出。它将记录文件的完整路径：</p><p><code>22 Jun 12:34:56 - [info] Settings file  : /Users/nol/.node-red/settings.js</code></p>]]></content>
      
      
      <categories>
          
          <category> Node-RED </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何取得舊版 macOS</title>
      <link href="/2022/05/23/ru-he-qu-de-jiu-ban-macos/"/>
      <url>/2022/05/23/ru-he-qu-de-jiu-ban-macos/</url>
      
        <content type="html"><![CDATA[<p>如果您的 Mac 與最新版 macOS 不相容，您可以升級到舊版 macOS，例如 macOS Big Sur、Catalina、Mojave 或 High Sierra。</p><p>若要取得最新功能，並維護 Mac 的安全性、穩定性、相容性與效能，請務必讓軟體保持最新狀態。Apple 建議您一律使用與 Mac 相容的最新版 macOS。</p><p><a href="https://support.apple.com/zh-tw/HT212735">了解如何升級為 macOS Monterey</a>（最新版 macOS）。</p><h2 id="檢查相容性"><a href="#檢查相容性" class="headerlink" title="檢查相容性"></a>檢查相容性</h2><p>Mac 隨附的 macOS 版本是其可以使用的最早版本。例如，如果 Mac 隨附 macOS Big Sur，則不能使用 macOS Catalina 或之前版本。如果 macOS 與裝置不相容，App Store 或安裝程式會告知您。如果您嘗試安裝比目前安裝版本更舊的 macOS，安裝程式會指出此版本的 macOS 太舊，無法在這一版的 macOS 中打開。</p><ul><li>macOS Big Sur 11 <a href="https://support.apple.com/zh-tw/HT211238">硬體需求</a></li><li>macOS Catalina 10.15 <a href="https://support.apple.com/zh-tw/HT210222">硬體需求</a></li><li>macOS Mojave 10.14 <a href="https://support.apple.com/kb/SP777?locale=zh_TW">硬體需求</a></li><li>macOS High Sierra 10.13 <a href="https://support.apple.com/kb/SP765?locale=zh_TW">硬體需求</a></li><li>macOS Sierra 10.12 <a href="https://support.apple.com/kb/SP742?locale=zh_TW">硬體需求</a></li><li>OS X El Capitan 10.11 <a href="https://support.apple.com/kb/SP728?locale=zh_TW">硬體需求</a></li><li>OS X Yosemite 10.10 <a href="https://support.apple.com/kb/SP711?locale=zh_TW">硬體需求</a></li></ul><hr><h2 id="製作備份"><a href="#製作備份" class="headerlink" title="製作備份"></a>製作備份</h2><p>安裝任何升級程式之前，最好先<a href="https://support.apple.com/zh-tw/HT201250">備份 Mac</a>。「時光機」可協助您輕鬆備份，而您也可以採取其他備份方法。</p><hr><h2 id="在-Mac-上使用-Safari-下載-macOS"><a href="#在-Mac-上使用-Safari-下載-macOS" class="headerlink" title="在 Mac 上使用 Safari 下載 macOS"></a>在 Mac 上使用 Safari 下載 macOS</h2><p>Safari 會利用這些連結在 App Store 中尋找舊版安裝程式。從 App Store 下載安裝程式後，安裝程式會自動打開。</p><ul><li><a href="macappstores://apps.apple.com/tw/app/macos-big-sur/id1526878132?mt=12">macOS Big Sur</a> 可以升級 Catalina、Mojave、High Sierra、Sierra、El Capitan、Yosemite、Mavericks</li><li><a href="macappstores://apps.apple.com/tw/app/macos-catalina/id1466841314?mt=12">macOS Catalina</a> 可以升級 Mojave、High Sierra、Sierra、El Capitan、Yosemite、Mavericks</li><li><a href="macappstores://apps.apple.com/tw/app/macos-mojave/id1398502828?mt=12">macOS Mojave</a> 可以升級 High Sierra、Sierra、El Capitan、Yosemite、Mavericks、Mountain Lion</li><li><a href="macappstores://apps.apple.com/tw/app/macos-high-sierra/id1246284741?mt=12">macOS High Sierra</a> 可以升級 Sierra、El Capitan、Yosemite、Mavericks、Mountain Lion</li></ul><p>Safari 會以名為 InstallOS.dmg 或 InstallMacOSX.dmg 的磁碟映像檔的形式，來下載以下舊版安裝程式。請開啟磁碟映像檔，然後開啟其中的 .pkg 安裝程式。它會安裝一個名為「安裝 [版本名稱]」的 App。從「應用程式」檔案夾中打開該 App，即可開始安裝作業系統。</p><ul><li><a href="http://updates-http.cdn-apple.com/2019/cert/061-39476-20191023-48f365f4-0015-4c41-9f44-39d3d2aca067/InstallOS.dmg">macOS Sierra</a> 可以升級 El Capitan、Yosemite、Mavericks、Mountain Lion 或 Lion</li><li><a href="http://updates-http.cdn-apple.com/2019/cert/061-41424-20191024-218af9ec-cf50-4516-9011-228c78eda3d2/InstallMacOSX.dmg">OS X El Capitan</a> 可以升級 Yosemite、Mavericks、Mountain Lion、Lion 或 Snow Leopard</li><li><a href="http://updates-http.cdn-apple.com/2019/cert/061-41343-20191023-02465f92-3ab5-4c92-bfe2-b725447a070d/InstallMacOSX.dmg">OS X Yosemite</a> 可以升級 Mavericks、Mountain Lion、Lion 或 Snow Leopard</li></ul><p>發佈日期： 2022 年 03 月 03 日</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶面尺寸和镜头焦距配套对应的视场角</title>
      <link href="/2022/05/23/ba-mian-chi-cun-he-jing-tou-jiao-ju-pei-tao-dui-ying-de-shi-chang-jiao/"/>
      <url>/2022/05/23/ba-mian-chi-cun-he-jing-tou-jiao-ju-pei-tao-dui-ying-de-shi-chang-jiao/</url>
      
        <content type="html"><![CDATA[<div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>镜头焦距：</th><th>1.9mm</th><th>1.9mm</th><th>1.9mm</th><th>2.4mm</th><th>2.8mm</th><th>2.8mm</th><th>2.8mm</th><th>3.6mm</th><th>3.6mm</th><th>3.6mm</th><th>3.9mm</th><th>4mm</th><th>4mm</th><th>4mm</th><th>5mm</th><th>6mm</th></tr></thead><tbody><tr><td>靶面尺寸</td><td>长(mm)</td><td>宽(mm)</td><td>对角(mm)</td><td>水平视场角</td><td>垂直视场角</td><td>视场角</td><td>水平视场角</td><td>水平视场角</td><td>垂直视场角</td><td>视场角</td><td>水平视场角</td><td>垂直视场角</td><td>视场角</td><td>水平视场角</td><td>水平视场角</td><td>垂直视场角</td><td>视场角</td><td>水平视场角</td><td>水平视场角</td></tr><tr><td>1/6”</td><td>2.4</td><td>1.8</td><td>3</td><td>64.55128973</td><td>50.69235275</td><td>76.58032769</td><td>53.13010326</td><td>46.39718182</td><td>35.63777844</td><td>56.35718118</td><td>36.86989827</td><td>28.07248741</td><td>45.23973067</td><td>34.20545852</td><td>33.39849</td><td>25.36077</td><td>41.11209</td><td>28.04247</td><td>22.61987</td></tr><tr><td>1/4”</td><td>3.2</td><td>2.4</td><td>4</td><td>80.20181646</td><td>64.55128973</td><td>92.93760301</td><td>67.3801362</td><td>59.48976361</td><td>46.39718182</td><td>71.0753568</td><td>47.92497877</td><td>36.86989827</td><td>58.10920919</td><td>44.61241087</td><td>43.60282</td><td>33.39849</td><td>53.1301</td><td>37.97443</td><td>29.86283</td></tr><tr><td>1/4”</td><td>3.6</td><td>2.7</td><td>4.5</td><td>86.90368608</td><td>70.7895929</td><td>99.64153386</td><td>73.73979655</td><td>65.47045366</td><td>51.48141759</td><td>77.56872952</td><td>53.13010326</td><td>41.11209114</td><td>64.01076751</td><td>49.55028198</td><td>48.45549</td><td>37.29908</td><td>58.71551</td><td>43.13259</td><td>33.39849</td></tr><tr><td>1/3.6”</td><td>4</td><td>3</td><td>5</td><td>92.93760301</td><td>76.58032769</td><td>105.5303338</td><td>79.61114354</td><td>71.0753568</td><td>56.35718118</td><td>83.52060083</td><td>58.10920919</td><td>45.23973067</td><td>69.55566392</td><td>54.29936432</td><td>53.1301</td><td>41.11209</td><td>64.01077</td><td>48.44853</td><td>36.8699</td></tr><tr><td>1/3.2”</td><td>4.536</td><td>3.416</td><td>5.678</td><td>100.0913228</td><td>83.90774916</td><td>112.4151895</td><td>86.76048649</td><td>78.01494644</td><td>62.76638318</td><td>90.79251787</td><td>64.42185655</td><td>50.76348344</td><td>76.51941044</td><td>60.35929687</td><td>59.10647</td><td>46.24497</td><td>70.73046</td><td>55.86371</td><td>41.41318</td></tr><tr><td>1/3”</td><td>4.8</td><td>3.6</td><td>6</td><td>103.265031</td><td>86.90368608</td><td>115.305115</td><td>90.00000154</td><td>81.20259068</td><td>65.47045366</td><td>93.94986962</td><td>67.3801362</td><td>53.13010326</td><td>79.61114354</td><td>63.21500557</td><td>61.92751</td><td>48.45549</td><td>73.7398</td><td>59.65761</td><td>43.60282</td></tr><tr><td>1/2.8”</td><td>4.59</td><td>3.42</td><td>5.71</td><td>100.7581907</td><td>83.97442642</td><td>112.712541</td><td>87.4376781</td><td>78.67903116</td><td>62.82601814</td><td>91.11447318</td><td>65.03502234</td><td>50.81543708</td><td>76.83274295</td><td>60.95034996</td><td>59.6901</td><td>46.29342</td><td>71.0347</td><td>56.6316</td><td>41.86371</td></tr><tr><td>1/2.7”</td><td>5.27</td><td>3.96</td><td>6.592</td><td>108.4120734</td><td>92.3623794</td><td>120.0768619</td><td>95.3444878</td><td>86.52220908</td><td>70.53153652</td><td>99.30323061</td><td>72.40411143</td><td>57.62158847</td><td>84.95166994</td><td>68.08914978</td><td>66.74979</td><td>52.67082</td><td>78.97705</td><td>66.68016</td><td>47.41896</td></tr><tr><td>1/2.7”</td><td>5.371</td><td>4.035</td><td>6.718</td><td>109.4409395</td><td>93.43598697</td><td>121.0111347</td><td>96.42642672</td><td>87.60845497</td><td>71.54819508</td><td>100.3720838</td><td>73.44383343</td><td>58.53399502</td><td>86.03311928</td><td>69.10180006</td><td>67.75285</td><td>53.53047</td><td>80.04372</td><td>68.23864</td><td>48.22499</td></tr><tr><td>1/2.5”</td><td>5.76</td><td>4.29</td><td>7.182</td><td>113.172555</td><td>96.93218357</td><td>124.2333209</td><td>100.3888595</td><td>91.61386047</td><td>74.90938911</td><td>104.1109859</td><td>77.31961783</td><td>61.57579159</td><td>89.85658289</td><td>72.88888476</td><td>71.50778</td><td>56.40487</td><td>83.83182</td><td>74.42337</td><td>51.28201</td></tr><tr><td>1/2.3”</td><td>6.16</td><td>4.62</td><td>7.7</td><td>116.6605317</td><td>101.1246685</td><td>127.4667255</td><td>104.1470771</td><td>95.45262362</td><td>79.04526389</td><td>107.9452551</td><td>81.09765338</td><td>65.3738742</td><td>93.84391352</td><td>76.59937866</td><td>75.19254</td><td>60.01287</td><td>87.81062</td><td>81.11793</td><td>54.34588</td></tr><tr><td>1/2”</td><td>6.4</td><td>4.8</td><td>8</td><td>118.6005569</td><td>103.265031</td><td>129.184566</td><td>106.2602065</td><td>97.62815133</td><td>81.20259068</td><td>110.0159615</td><td>83.26708009</td><td>67.3801362</td><td>96.02557665</td><td>78.73863583</td><td>77.31962</td><td>61.92751</td><td>90</td><td>85.31844</td><td>56.14497</td></tr><tr><td>1/1.8”</td><td>7.2</td><td>5.4</td><td>9</td><td>124.3518094</td><td>109.7316158</td><td>134.218899</td><td>112.6198669</td><td>104.2500345</td><td>87.91674815</td><td>116.2184184</td><td>90.00000154</td><td>73.73979655</td><td>102.6803852</td><td>85.41878137</td><td>83.97443</td><td>68.0387</td><td>96.73292</td><td>100.5046</td><td>61.92751</td></tr><tr><td>1/1.7”</td><td>7.6</td><td>5.7</td><td>9.5</td><td>126.8698998</td><td>112.6198669</td><td>136.3971834</td><td>115.4487133</td><td>107.2312982</td><td>91.01405967</td><td>118.9635407</td><td>93.09631699</td><td>76.73497208</td><td>105.6834082</td><td>88.5118831</td><td>87.0624</td><td>70.93975</td><td>99.79819</td><td>108.9137</td><td>64.69489</td></tr><tr><td>1/1.6”</td><td>8.08</td><td>6.01</td><td>10.07</td><td>129.6250777</td><td>115.3913423</td><td>138.6511528</td><td>118.5743466</td><td>110.5507182</td><td>94.04505096</td><td>121.842496</td><td>96.59223359</td><td>79.70500692</td><td>108.8708424</td><td>92.0202983</td><td>90.5701</td><td>73.83141</td><td>103.07</td><td>119.8922</td><td>67.90739</td></tr><tr><td>2/3”</td><td>8.8</td><td>6.6</td><td>11</td><td>133.2888726</td><td>120.1369784</td><td>141.8845934</td><td>122.7790828</td><td>115.0576174</td><td>99.37180137</td><td>126.0395407</td><td>101.421188</td><td>85.02089561</td><td>113.5868613</td><td>96.89477536</td><td>95.45262</td><td>79.04526</td><td>107.9453</td><td>138.6173</td><td>72.50768</td></tr><tr><td>1”</td><td>12.9</td><td>9.6</td><td>16</td><td>147.1728347</td><td>136.8093814</td><td>153.2795657</td><td>139.1802367</td><td>133.0678505</td><td>119.4871277</td><td>141.41991</td><td>121.6647753</td><td>106.2602065</td><td>131.5445116</td><td>117.681393</td><td>116.3893</td><td>100.3889</td><td>126.8699</td><td>397.3125</td><td>94.14006</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 摄像头相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视场角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bits 速查表</title>
      <link href="/2022/05/22/bits-su-cha-biao/"/>
      <url>/2022/05/22/bits-su-cha-biao/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="bits-cheat-sheet.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
        <tags>
            
            <tag> Bits </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java函数式编程之Optional</title>
      <link href="/2022/05/21/java-han-shu-shi-bian-cheng-zhi-optional/"/>
      <url>/2022/05/21/java-han-shu-shi-bian-cheng-zhi-optional/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><blockquote><p>转载内容 如有侵权 或 不希望被转载 可以留言或私发告诉我，我会及时处理，尊重你的权利。<br>原文地址：<a href="https://juejin.cn/post/6844903908360323080">https://juejin.cn/post/6844903908360323080</a></p></blockquote><p><code>java.util.Optional</code>是JDK8中引入的类，它是JDK从著名的Java工具包<code>Guava</code>中移植过来。本文编写的时候使用的是JDK11。<code>Optional</code>是一个包含了<code>NULL</code>值或者非<code>NULL</code>值的对象容器，它常用作明确表明没有结果（其实明确表明存在结果也可以用<code>Optional</code>表示）的方法返回类型，这样可以避免<code>NULL</code>值带来的可能的异常（一般是<code>NullPointerException</code>）。也就是说，一个方法的返回值类型是<code>Optional</code>，则应该避免返回<code>NULL</code>，而应该让返回值指向一个包含<code>NULL</code>对象的<code>Optional</code>实例。<code>Optional</code>的出现为<code>NULL</code>判断、过滤操作、映射操作等提供了函数式适配入口，它算是Java引入函数式编程的一个重要的里程碑。</p><h2 id="Optional各个方法源码分析和使用场景"><a href="#Optional各个方法源码分析和使用场景" class="headerlink" title="Optional各个方法源码分析和使用场景"></a>Optional各个方法源码分析和使用场景</h2><p><code>Optional</code>的源码比较简单，归根于它是一个简单的对象容器。下面会结合源码分析它的所有构造、属性、方法和对应的使用场景。</p><h3 id="Optional属性和构造"><a href="#Optional属性和构造" class="headerlink" title="Optional属性和构造"></a>Optional属性和构造</h3><p><code>Optional</code>的属性和构造如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public final class Optional&lt;T&gt; &#123;    &#x2F;&#x2F; 这个是通用的代表NULL值的Optional实例    private static final Optional&lt;?&gt; EMPTY &#x3D; new Optional&lt;&gt;();    &#x2F;&#x2F; 泛型类型的对象实例    private final T value;        &#x2F;&#x2F; 实例化Optional，注意是私有修饰符，value置为NULL    private Optional() &#123;        this.value &#x3D; null;    &#125;        &#x2F;&#x2F; 直接返回内部的EMPTY实例    public static&lt;T&gt; Optional&lt;T&gt; empty() &#123;        @SuppressWarnings(&quot;unchecked&quot;)        Optional&lt;T&gt; t &#x3D; (Optional&lt;T&gt;) EMPTY;        return t;    &#125;        &#x2F;&#x2F; 通过value实例化Optional，如果value为NULL则抛出NPE    private Optional(T value) &#123;        this.value &#x3D; Objects.requireNonNull(value);    &#125;        &#x2F;&#x2F; 通过value实例化Optional，如果value为NULL则抛出NPE，实际上就是使用Optional(T value)    public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123;        return new Optional&lt;&gt;(value);    &#125;    &#x2F;&#x2F; 如果value为NULL则返回EMPTY实例，否则调用Optional#of(value)    public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123;        return value &#x3D;&#x3D; null ? empty() : of(value);    &#125;        &#x2F;&#x2F; 暂时省略其他代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果明确一个对象实例不为<code>NULL</code>的时候，应该使用<code>Optional#of()</code>，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Order o &#x3D; selectByOrderId(orderId);assert null !&#x3D; oOptional op &#x3D; Optional.of(o);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果无法明确一个对象实例是否为<code>NULL</code>的时候，应该使用<code>Optional#ofNullable()</code>，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional op &#x3D; Optional.ofNullable(selectByOrderId(orderId));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>明确表示一个持有<code>NULL</code>值的<code>Optional</code>实例可以使用<code>Optional.empty()</code>。</p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 如果value为空，则抛出NPE，否则直接返回valuepublic T get() &#123;    if (value &#x3D;&#x3D; null) &#123;        throw new NoSuchElementException(&quot;No value present&quot;);    &#125;    return value;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>get()</code>方法一般是需要明确<code>value</code>不为<code>NULL</code>的时候使用，它做了先验<code>value</code>的存在性。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Order o &#x3D; selectByOrderId(orderId);assert null !&#x3D; oOptional op &#x3D; Optional.of(o);Order value &#x3D; op.get();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="isPresent-方法"><a href="#isPresent-方法" class="headerlink" title="isPresent()方法"></a>isPresent()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 判断value是否存在，不为NULL则返回true，如果为NULL则返回falsepublic boolean isPresent() &#123;    return value !&#x3D; null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>举个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Order o &#x3D; selectByOrderId(orderId);boolean existed &#x3D; Optional.ofNullable(o).isPresent();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="isEmpty-方法"><a href="#isEmpty-方法" class="headerlink" title="isEmpty()方法"></a>isEmpty()方法</h3><p><code>isEmpty()</code>是JDK11引入的方法，是<code>isPresent()</code>的反向判断：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 判断value是否存在，为NULL则返回true，为非NULL则返回falsepublic boolean isEmpty() &#123;    return value &#x3D;&#x3D; null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ifPresent-方法"><a href="#ifPresent-方法" class="headerlink" title="ifPresent()方法"></a>ifPresent()方法</h3><p><code>ifPresent()</code>方法的作用是：如果<code>value</code>不为<code>NULL</code>，则使用<code>value</code>调用消费者函数式接口的消费方法<code>Consumer#accept()</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void ifPresent(Consumer&lt;? super T&gt; action) &#123;    if (value !&#x3D; null) &#123;        action.accept(value);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional.ofNullable(selectByOrderId(orderId)).ifPresent(o-&gt; LOGGER.info(&quot;订单ID:&#123;&#125;&quot;,o.getOrderId());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ifPresentOrElse-方法"><a href="#ifPresentOrElse-方法" class="headerlink" title="ifPresentOrElse()方法"></a>ifPresentOrElse()方法</h3><p><code>ifPresentOrElse()</code>方法是JDK9新增的方法，它是<code>ifPresent()</code>方法的加强版，如果<code>value</code>不为<code>NULL</code>，则使用<code>value</code>调用消费者函数式接口的消费方法<code>Consumer#accept()</code>，如果<code>value</code>为<code>NULL</code>则执行<code>Runnable#run()</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void ifPresentOrElse(Consumer&lt;? super T&gt; action, Runnable emptyAction) &#123;    if (value !&#x3D; null) &#123;        action.accept(value);    &#125; else &#123;        emptyAction.run();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String orderId &#x3D; &quot;xxxx&quot;; Optional.ofNullable(selectByOrderId(orderId)).ifPresentOrElse(o-&gt; LOGGER.info(&quot;订单ID:&#123;&#125;&quot;,o.getOrderId()), ()-&gt; LOGGER.info(&quot;订单&#123;&#125;不存在&quot;,o.getOrderId()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter()方法"></a>filter()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate) &#123;    &#x2F;&#x2F; 判断predicate不能为NULL    Objects.requireNonNull(predicate);    &#x2F;&#x2F; value为NULL，说明是空实例，则直接返回自身    if (!isPresent()) &#123;        return this;    &#125; else &#123;        &#x2F;&#x2F; value不为NULL，则通过predicate判断，命中返回自身，不命中则返回空实例empty        return predicate.test(value) ? this : empty();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法的功能是简单的过滤功能，容器持有对象<code>value</code>非<code>NULL</code>会做一次判断，决定返回自身实例还是<code>empty()</code>。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional.ofNullable(selectByOrderId(orderId)).filter(o -&gt; o.getStatus() &#x3D;&#x3D; 1).ifPresent(o-&gt; LOGGER.info(&quot;订单&#123;&#125;的状态为1&quot;,o.getOrderId));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h3><p><code>map()</code>是简单的值映射操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public &lt;U&gt; Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper) &#123;    &#x2F;&#x2F; 判断mapper不能为NULL    Objects.requireNonNull(mapper);    &#x2F;&#x2F; value为NULL，说明是空实例，则直接返回empty()    if (!isPresent()) &#123;        return empty();    &#125; else &#123;        &#x2F;&#x2F; value不为NULL，通过mapper转换类型，重新封装为可空的Optional实例        return Optional.ofNullable(mapper.apply(value));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>API注释里面的一个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;URI&gt; uris &#x3D; ...;&#x2F;&#x2F; 找到URI列表中未处理的URI对应的路径Optional&lt;Path&gt; p &#x3D; uris.stream().filter(uri -&gt; !isProcessedYet(uri)).findFirst().map(Paths::get);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="flatMap-方法"><a href="#flatMap-方法" class="headerlink" title="flatMap()方法"></a>flatMap()方法</h3><p><code>flatMap()</code>方法也是一个映射操作，不过映射的<code>Optional</code>类型返回值直接由外部决定，不需要通过值重新封装为<code>Optional</code>实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public &lt;U&gt; Optional&lt;U&gt; flatMap(Function&lt;? super T, ? extends Optional&lt;? extends U&gt;&gt; mapper) &#123;    &#x2F;&#x2F; mapper存在性判断    Objects.requireNonNull(mapper);    &#x2F;&#x2F; value为NULL，说明是空实例，则直接返回empty()    if (!isPresent()) &#123;        return empty();    &#125; else &#123;        &#x2F;&#x2F; value不为NULL，通过mapper转换，直接返回mapper的返回值，做一次空判断        @SuppressWarnings(&quot;unchecked&quot;)        Optional&lt;U&gt; r &#x3D; (Optional&lt;U&gt;) mapper.apply(value);        return Objects.requireNonNull(r);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class OptionalOrderFactory&#123;    static Optional&lt;Order&gt; create(String id)&#123;        &#x2F;&#x2F;省略...    &#125;&#125;String orderId &#x3D; &quot;xxx&quot;;Optional&lt;Order&gt; op &#x3D;  Optional.of(orderId).flatMap(id -&gt; OptionalOrderFactory.create(id));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="or-方法"><a href="#or-方法" class="headerlink" title="or()方法"></a>or()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Optional&lt;T&gt; or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier) &#123;    &#x2F;&#x2F; supplier存在性判断    Objects.requireNonNull(supplier);    &#x2F;&#x2F; value不为NULL，则直接返回自身    if (isPresent()) &#123;        return this;    &#125; else &#123;        &#x2F;&#x2F; value为NULL，则返回supplier提供的Optional实例，做一次空判断        @SuppressWarnings(&quot;unchecked&quot;)        Optional&lt;T&gt; r &#x3D; (Optional&lt;T&gt;) supplier.get();        return Objects.requireNonNull(r);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Order a &#x3D; null;Order b &#x3D; select();&#x2F;&#x2F; 拿到的就是b订单实例包装的OptionalOptional&lt;Order&gt; op &#x3D; Optional.ofNullable(a).or(b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="stream-方法"><a href="#stream-方法" class="headerlink" title="stream()方法"></a>stream()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 对value做NULL判断，转换为Stream类型public Stream&lt;T&gt; stream() &#123;    if (!isPresent()) &#123;        return Stream.empty();    &#125; else &#123;        return Stream.of(value);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orElse-方法"><a href="#orElse-方法" class="headerlink" title="orElse()方法"></a>orElse()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 值不为NULL则直接返回value，否则返回otherpublic T orElse(T other) &#123;    return value !&#x3D; null ? value : other;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>orElse()</code>就是常见的提供默认值兜底的方法，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String v1 &#x3D; null;String v2 &#x3D; &quot;default&quot;;&#x2F;&#x2F; 拿到的就是v2对应的&quot;default&quot;值String value &#x3D; Optional.ofNullable(v1).orElse(v2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orElseGet-方法"><a href="#orElseGet-方法" class="headerlink" title="orElseGet()方法"></a>orElseGet()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 值不为NULL则直接返回value，否则返回Supplier#get()public T orElseGet(Supplier&lt;? extends T&gt; supplier) &#123;    return value !&#x3D; null ? value : supplier.get();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>orElseGet()</code>只是<code>orElse()</code>方法的升级版，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String v1 &#x3D; null;Supplier&lt;String&gt; v2 &#x3D; () -&gt; &quot;default&quot;;&#x2F;&#x2F; 拿到的就是v2对应的&quot;default&quot;值String value &#x3D; Optional.ofNullable(v1).orElseGet(v2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="orElseThrow-方法"><a href="#orElseThrow-方法" class="headerlink" title="orElseThrow()方法"></a>orElseThrow()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 如果值为NULL，则抛出NoSuchElementException，否则直接返回valuepublic T orElseThrow() &#123;    if (value &#x3D;&#x3D; null) &#123;        throw new NoSuchElementException(&quot;No value present&quot;);    &#125;    return value;&#125;&#x2F;&#x2F; 如果值不为NULL，则直接返回value，否则返回Supplier#get()提供的异常实例public &lt;X extends Throwable&gt; T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier) throws X &#123;    if (value !&#x3D; null) &#123;        return value;    &#125; else &#123;        throw exceptionSupplier.get();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional.ofNullable(orderInfoVo.getAmount()).orElseThrow(()-&gt; new IllegalArgumentException(String.format(&quot;%s订单的amount不能为NULL&quot;,orderInfoVo.getOrderId())));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="equals-和hashCode-方法"><a href="#equals-和hashCode-方法" class="headerlink" title="equals()和hashCode()方法"></a>equals()和hashCode()方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public boolean equals(Object obj) &#123;    if (this &#x3D;&#x3D; obj) &#123;        return true;    &#125;    if (!(obj instanceof Optional)) &#123;        return false;    &#125;    Optional&lt;?&gt; other &#x3D; (Optional&lt;?&gt;) obj;    return Objects.equals(value, other.value);&#125;public int hashCode() &#123;    return Objects.hashCode(value);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个方法都是比较<code>value</code>，说明了<code>Optional</code>实例如果使用于<code>HashMap</code>的KEY，只要<code>value</code>相同，对于<code>HashMap</code>就是同一个KEY。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Map&lt;Optional,Boolean&gt; map &#x3D; new HashMap&lt;&gt;();Optional&lt;String&gt; op1 &#x3D; Optional.of(&quot;throwable&quot;);map.put(op1, true);Optional&lt;String&gt; op2 &#x3D; Optional.of(&quot;throwable&quot;);map.put(op2, false);&#x2F;&#x2F; 输出falseSystem.out.println(map.get(op1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Optional实战"><a href="#Optional实战" class="headerlink" title="Optional实战"></a>Optional实战</h2><p>下面展示一下<code>Optional</code>的一些常见的使用场景。</p><h3 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h3><p>空判断主要是用于不知道当前对象是否为<code>NULL</code>的时候，需要设置对象的属性。不使用<code>Optional</code>时候的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">if(null !&#x3D; order)&#123;    order.setAmount(orderInfoVo.getAmount());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<code>Optional</code>时候的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional.ofNullable(order).ifPresent(o -&gt; o.setAmount(orderInfoVo.getAmount()));&#x2F;&#x2F; 如果判断空的对象是OrderInfoVo如下Order o &#x3D; select();OrderInfoVo vo &#x3D; ...Optional.ofNullable(vo).ifPresent(v -&gt; o.setAmount(v.getAmount()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>Optional</code>实现空判断的好处是<strong>只有一个属性设值的时候可以压缩代码为一行</strong>，这样做的话，代码会相对简洁。</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>在维护一些老旧的系统的时候，很多情况下外部的传参没有做空判断，因此需要写一些断言代码如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">if (null &#x3D;&#x3D; orderInfoVo.getAmount())&#123;    throw new IllegalArgumentException(String.format(&quot;%s订单的amount不能为NULL&quot;,orderInfoVo.getOrderId()));&#125;if (StringUtils.isBlank(orderInfoVo.getAddress())&#123;    throw new IllegalArgumentException(String.format(&quot;%s订单的address不能为空&quot;,orderInfoVo.getOrderId()));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>Optional</code>后的断言代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Optional.ofNullable(orderInfoVo.getAmount()).orElseThrow(()-&gt; new IllegalArgumentException(String.format(&quot;%s订单的amount不能为NULL&quot;,orderInfoVo.getOrderId())));Optional.ofNullable(orderInfoVo.getAddress()).orElseThrow(()-&gt; new IllegalArgumentException(String.format(&quot;%s订单的address不能为空&quot;,orderInfoVo.getOrderId())));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="综合仿真案例"><a href="#综合仿真案例" class="headerlink" title="综合仿真案例"></a>综合仿真案例</h3><p>下面是一个仿真案例，模拟的步骤如下：</p><ul><li>给出客户ID列表查询客户列表。</li><li>基于存在的客户列表中的客户ID查询订单列表。</li><li>基于订单列表转换为订单DTO视图列表。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datastatic class Customer &#123;    private Long id;&#125;@Datastatic class Order &#123;    private Long id;    private String orderId;    private Long customerId;&#125;@Datastatic class OrderDto &#123;    private String orderId;&#125;&#x2F;&#x2F; 模拟客户查询private static List&lt;Customer&gt; selectCustomers(List&lt;Long&gt; ids) &#123;    return null;&#125;&#x2F;&#x2F; 模拟订单查询private static List&lt;Order&gt; selectOrders(List&lt;Long&gt; customerIds) &#123;    return null;&#125;&#x2F;&#x2F; main方法public static void main(String[] args) throws Exception &#123;    List&lt;Long&gt; ids &#x3D; new ArrayList&lt;&gt;();    List&lt;OrderDto&gt; view &#x3D; Optional.ofNullable(selectCustomers(ids))            .filter(cs -&gt; !cs.isEmpty())            .map(cs -&gt; selectOrders(cs.stream().map(Customer::getId).collect(Collectors.toList())))            .map(orders -&gt; &#123;                List&lt;OrderDto&gt; dtoList &#x3D; new ArrayList&lt;&gt;();                orders.forEach(o -&gt; &#123;                    OrderDto dto &#x3D; new OrderDto();                    dto.setOrderId(o.getOrderId());                    dtoList.add(dto);                &#125;);                return dtoList;            &#125;).orElse(Collections.emptyList());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>Optional</code>本质是一个对象容器，它的特征如下：</p><ol><li><code>Optional</code>作为一个容器承载对象，提供方法适配部分函数式接口，结合部分函数式接口提供方法实现<code>NULL</code>判断、过滤操作、安全取值、映射操作等等。</li><li><code>Optional</code>一般使用场景是用于方法返回值的包装，当然也可以作为临时变量从而享受函数式接口的便捷功能。</li><li><code>Optional</code>只是一个简化操作的工具，可以解决多层嵌套代码的节点空判断问题（例如简化箭头型代码）。</li><li><code>Optional</code>并非银弹。</li></ol><p>这里提到箭头型代码，下面尝试用常规方法和<code>Optional</code>分别解决：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 假设VO有多个层级，每个层级都不知道父节点是否为NULL，如下&#x2F;&#x2F; - OrderInfoVo&#x2F;&#x2F;   - UserInfoVo&#x2F;&#x2F;     - AddressInfoVo&#x2F;&#x2F;        - address(属性)&#x2F;&#x2F; 假设我要为address属性赋值，那么就会产生箭头型代码。&#x2F;&#x2F; 常规方法String address &#x3D; &quot;xxx&quot;;OrderInfoVo o &#x3D; ...;if(null !&#x3D; o)&#123;    UserInfoVo uiv &#x3D; o.getUserInfoVo();    if (null !&#x3D; uiv)&#123;        AddressInfoVo aiv &#x3D; uiv.getAddressInfoVo();        if (null !&#x3D; aiv)&#123;            aiv.setAddress(address);        &#125;    &#125;&#125;&#x2F;&#x2F; 使用OptionalString address &#x3D; &quot;xxx&quot;;OrderInfoVo o &#x3D; null;Optional.ofNullable(o)        .map(OrderInfoVo::getUserInfoVo)        .map(UserInfoVo::getAddressInfoVo)        .ifPresent(a -&gt; a.setAddress(address));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>Optional</code>解决箭头型代码，通过映射操作<code>map()</code>能减少大量的<code>if</code>和<code>NULL</code>判断分支，使得代码更加简洁。</p><p>有些开发者提议把<code>DAO</code>方法的返回值类型定义为<code>Optional</code>，笔者对此持中立态度，原因是：</p><ol><li><code>Optional</code>是JDK1.8引入，低版本的JDK并不能使用，不是所有的系统都能平滑迁移到JDK1.8+。</li><li>并不是所有人都热衷于函数式编程，因为它带来了便捷的同时转变了代码的阅读逻辑（有些人甚至会认为降低了代码的可读性）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Optional </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>球机PTZ和视场角与ONVIF和PTZ对应关系</title>
      <link href="/2022/05/21/qiu-ji-ptz-he-shi-chang-jiao-yu-onvif-he-ptz-dui-ying-guan-xi/"/>
      <url>/2022/05/21/qiu-ji-ptz-he-shi-chang-jiao-yu-onvif-he-ptz-dui-ying-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>文章目录</p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><ul><li><p>不同品牌对应关系不一致，同一品牌，根据摄像头产品参数也会不一致</p></li><li><p>球机的PTZ和ONVIF的PTZ是线性关系</p></li><li><p>摄像头的视场角与ONVIF的Zoom是非线性关系</p></li><li><p>ONVIF的PTZ范围</p><p>P、T ∈[-1, 1]</p><p>Z∈ [0,1]</p></li><li><p>球机PTZ范围：根据不同型号不一致</p><h2 id="PTZ-ONVIF-amp-PTZ-SDK"><a href="#PTZ-ONVIF-amp-PTZ-SDK" class="headerlink" title="PTZ_ONVIF &amp; PTZ_SDK"></a>PTZ_ONVIF &amp; PTZ_SDK</h2></li><li><p>以海康相机iDS-2VS435-F837为例，分别ONVIF控制球机转动指定PTZ坐标，再使用SDK获取PTZ坐标</p></li><li>海康球机SDK获取PTZ坐标(具体参考《设备网络SDK使用手册》)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">int p_pos &#x3D; HexToDecMa(ptz_pos.wPanPos) &#x2F; 10 % 360;&#x2F;&#x2F; 十六进制转化为十进制角度int t_pos &#x3D; HexToDecMa(ptz_pos.wTiltPos) &#x2F; 10 % 360;int z_pos &#x3D; HexToDecMa(ptz_pos.wZoomPos) &#x2F; 10 % 360;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ONVIF——&gt;PTZ</p><p>模型函数是线性关系$\ y=kx+b $<br>LS最小二乘拟合<br>关系如下：<br>\begin{cases}<br>p′=179.87∗p+179.95 \\<br>t′=55.00∗t+35.24 \\<br>z′=36.00∗z+1.0<br>\end{cases}</p><p>球机水平方向转动360°<br>球机垂直方向转动[-20°, 90°]<br>球机光学放大倍数37倍<br>可以根据参数来验证拟合关系，设计正交试验，只需要测量几次即可</p><p>球机视场角与ONVIF对应关系</p><p>有时候需要实时获取视场角</p><p>视场角∝放大倍数∝Zoom</p><p>以海康相机iDS-2VS435-F837为例，固定PT，分别ONVIF控制球机转动指定Z，再获取视场角，视场角获取可以参考《视场角计算》</p><p>对应关系如下：</p><p>ONVIF-Zoom ——&gt;水平/垂直视场角</p><p>可以很明显看出是非线性关系<br>采用《非线性优化算法——LM》拟合曲线<br>关系如下</p><script type="math/tex; mode=display">{ F O V H = 1.626 ∗ e 0.634 0.177 + z o o m F O V V = 0.953 ∗ e 0.598 0.166 + z o o m{FOVH=1.626∗e0.6340.177+zoomFOVV=0.953∗e0.5980.166+zoom{FOVH=1.626∗e0.6340.177+zoomFOVV=0.953∗e0.5980.166+zoom{ FOV H =1.626∗e 0.177+zoom0.634FOV V =0.953∗e 0.166+zoom0.598</script><p>​    </p><p>拟合效果如下</p>]]></content>
      
      
      
        <tags>
            
            <tag> camera onvif </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/19/hello-world/"/>
      <url>/2022/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void main()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
